element.is <- substr(colnames(metadata.dat), 1, 2)=="S"
element.is
element.is <- substr(colnames(metadata.dat), 1, 2)=="Co"
element.is
metadata.small <- metadata.dat[,element.is]
head(metadata.small)
metadata.small <- metadata.dat[,c(element.is)]
head(metadata.small)
metadata.small <- as.data.frame(metadata.dat[,c(element.is)])
head(metadata.small)
metadata.small <- metadata.dat[,c(element.is), drop=FALSE]
head(metadata.small)
element.is <- substr(colnames(metadata.dat), 1, 2)=="S.K12"
head(element.is)
element.is
element.is <- substr(colnames(metadata.dat), 1, 2)=="S"
element.is
element.is <- substr(colnames(metadata.dat), 1, 2)=="Co"
element.is
element.is <- gsub("^(.*?)..*", "\\1", colnames(metadata.dat))=="S"
element.is
gsub("^(.*?)..*", "\\1", colnames(metadata.dat))
gsub("[.]", "", colnames(metadata.dat))
element.is <- gsub("[.].*$", "", colnames(metadata.dat))=="S"
element.is
gsub("[.].*$", "", colnames(metadata.dat))
update.packages(0)
update.packages()
library(shiny)
?sliderInput
shiny::runApp("~/GitHub/cloudCal")
elementGrabKbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-beta", sep=" "))#
    hold.ag#
}
fluorescence.lines <- read.csv(file="~/GitHub/CloudCal/data/FluorescenceLines.csv")
data <- read.csv(file="~/GitHub/CloudCal/data/blackdiamondmelt.csv")
elementGrabKbeta(Ca.K.beta, data)
head(data)
elementGrabKbeta(Ca, data)
elementGrabKalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-alpha", sep=" "))#
    hold.ag#
}
elementGrabKalpha(Ca, data)
elementGrabKalpha(Ca.K.alpha, data)
fluorescence.lines$Symbol
elementGrabKalpha("Ca", data)
elementGrabKbeta("Ca", data)
test <-     elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol=="Ca")
test
elementGrabKbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.file <- if(elementLine[8][1,]!=0){#
        subset(data$Spectrum, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    } else if(elementLine[8][1,]==0){#
            subset(data$Spectrum, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[7][1,]+0.02))#
    }#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-beta", sep=" "))#
    hold.ag#
}
elementGrabKbeta("Ca", data)
test[7][1,]-0.02
test[8][1,]-0.02
test[8][1,]
test[7][1,]+0.02
elementLine <- test
hold.file <- if(elementLine[8][1,]!=0){#
        subset(data$Spectrum, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    } else if(elementLine[8][1,]==0){#
            subset(data$Spectrum, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[7][1,]+0.02))#
    }
hold.file
5=5
is(5=5)
logical(5=5)
hold.file <- if(elementLine[8][1,]!=0){#
        subset(data$Spectrum, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    } else if(elementLine[8][1,]==0){#
            subset(data$Spectrum, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[7][1,]+0.04))#
    }
hold.file
hold.file <- if(elementLine[8][1,]!=0){#
        subset(data$Spectrum, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    } else if(elementLine[8][1,]==0){#
            subset(data$Spectrum, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[7][1,]+0.1))#
    }
hold.file
hold.cps <- if(elementLine[8][1,]!=0){#
        subset(data$CPS, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    } else if(elementLine[8][1,]==0){#
        subset(data$CPS, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[7][1,]+0.02))#
    }
hold.cps
shiny::runApp("~/GitHub/cloudCal")
update.packages()
shiny::runApp("~/GitHub/cloudCal")
library(pbapply)#
library(reshape2)#
library(TTR)#
library(plyr)#
library(dplyr)#
library(data.table)#
library(shiny)#
library(ggplot2)#
library(gghighlight)#
library(scales)#
library(gridExtra)#
library(Cairo)#
layOut = function(...) {#
    require(grid)#
    x <- list(...)#
    n <- max(sapply(x, function(x) max(x[[2]])))#
    p <- max(sapply(x, function(x) max(x[[3]])))#
    pushViewport(viewport(layout = grid.layout(n, p)))#
    for (i in seq_len(length(x))) {#
        print(x[[i]][[1]], vp = viewport(layout.pos.row = x[[i]][[2]],#
        layout.pos.col = x[[i]][[3]]))#
    }#
}#
#
file.0 <- function(file) {#
    if (length(file) > 0)#
    {#
        return(file)#
    }else{#
        return(levels(file))#
    }#
}#
#
is.0 <- function(cps, file) {#
    file.0 <- function(file) {#
        if (length(file) > 0)#
        {#
            return(file)#
        }else{#
            return(levels(file))#
        }#
    }#
    if (length(cps) > 0)#
    {#
        hope <-data.frame(cps, file.0(file))#
        return(hope)#
    } else {#
        empty <- rep(0, length(file.0(file)))#
        framed <- data.frame(empty, file.0(file))#
        return(framed)#
    }#
}#
lm_eqn = function(m) {#
    l <- list(a = format(coef(m)[1], digits = 2),#
    b = format(abs(coef(m)[2]), digits = 2),#
    r2 = format(summary(m)$r.squared, digits = 3));#
    eq <- substitute(italic(C)[i] == a + b %.% italic(I)[i]*","~~italic(r)^2~"="~r2,l)#
    as.character(as.expression(eq));#
}#
#
lm_eqn_poly = function(m) {#
    l <- list(a = format(coef(m)[1], digits = 2),#
    b = format(abs(coef(m)[2]), digits = 2),#
    c = format(abs(coef(m)[3]), digits = 2),#
    r2 = format(summary(m)$r.squared, digits = 3));#
    eq <- substitute(italic(C)[i] == a + c %.% italic(I)[i]^2 + b %.% italic(I)[i]*","~~italic(r)^2~"="~r2,l)#
    as.character(as.expression(eq));#
}#
#
lm_eqn_val = function(m) {#
    l <- list(a = format(coef(m)[1], digits = 2),#
    b = format(abs(coef(m)[2]), digits = 2),#
    r2 = format(summary(m)$r.squared, digits = 3));#
    eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,l)#
    as.character(as.expression(eq));#
}#
elementGrabKalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabKbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-beta", sep=" "))#
    hold.ag#
}#
#
elementGrabLalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][,1]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabLbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[12][1,]-0.02 | data$Energy > elementLine[14][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[12][1,]-0.02 | data$Energy > elementLine[14][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-beta", sep=" "))#
    hold.ag#
}#
#
elementGrab <- function(element.line, data) {#
    element <- strsplit(x=element.line, split="\\.")[[1]][1]#
    destination <- strsplit(x=element.line, split="\\.")[[1]][2]#
    distance <- strsplit(x=element.line, split="\\.")[[1]][3]#
    elementSelection <- if(destination=="K" && distance=="alpha"){#
        elementGrabKalpha(element, data)#
    } else if(destination=="K" && distance=="beta"){#
        elementGrabKbeta(element, data)#
    } else if(destination=="L" && distance=="alpha"){#
        elementGrabLalpha(element, data)#
    } else if (destination=="L" && distance=="beta"){#
        elementGrabLbeta(element, data)#
    }#
    elementSelection#
}#
general.prep <- function(spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    predict.frame <- data.frame(intensity)#
    colnames(predict.frame) <- c("Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    predict.intensity#
}#
#
simple.tc.prep <- function(data,spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Sample, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    predict.intensity.tc#
}#
simple.comp.prep <- function(data, spectra.line.table, element.line, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Spectrum, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame( intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    predict.intensity.comp#
}#
###Prep Data#
lucas.simp.prep <- function(spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lucas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lucas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lucas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lucas.slope.table) <- c(names(spectra.line.table), "None")#
    lucas.intercept.table <- data.frame(rowSums(lucas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE))#
    colnames(lucas.intercept.table) <- c("first")#
    lucas.intercept <- lucas.intercept.table$first#
    lucas.slope <- data.frame(lucas.slope.table[,slope.element.lines])#
    colnames(lucas.slope) <- slope.element.lines#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lucas.intercept))-lucas.intercept/(intensity+lucas.intercept)),lucas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lucas.slope))#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lucas.intercept)-lucas.intercept/(intensity+lucas.intercept))),lucas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lucas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lucas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lucas.slope))#
    predict.intensity.luk#
}#
lucas.tc.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Sample, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lucas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lucas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lucas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lucas.slope.table) <- c(names(spectra.line.table), "None")#
    lucas.intercept.table.tc <- data.frame(rowSums(lucas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE))/total.counts$CPS#
    colnames(lucas.intercept.table.tc) <- c("first")#
    lucas.intercept.tc <- lucas.intercept.table.tc$first#
    lucas.slope.tc <- data.frame(lucas.slope.table[,slope.element.lines])/total.counts$CPS#
    colnames(lucas.slope.tc) <- slope.element.lines#
    predict.intensity.luk.tc <- data.frame(((1+intensity/(intensity+lucas.intercept.tc)-lucas.intercept.tc/(intensity+lucas.intercept.tc))),lucas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lucas.slope.tc))#
    predict.intensity.luk.tc#
}#
lucas.comp.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Spectrum, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lucas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lucas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lucas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lucas.slope.table) <- c(names(spectra.line.table), "None")#
    lucas.intercept.table.comp <- data.frame(rowSums(lucas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE)/compton.frame.ag$Compton)#
    colnames(lucas.intercept.table.comp) <- c("first")#
    lucas.intercept.comp <- lucas.intercept.table.comp$first#
    lucas.slope.comp <- data.frame(lucas.slope.table[,slope.element.lines]/compton.frame.ag$Compton)#
    colnames(lucas.slope.comp) <- slope.element.lines#
    predict.frame.luk.comp <- data.frame(((1+intensity/compton.frame.ag$Compton)/(intensity/compton.frame.ag$Compton+lucas.intercept.comp)-lucas.intercept.comp/(intensity/compton.frame.ag$Compton+lucas.intercept.comp)),lucas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Intensity", names(lucas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lucas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lucas.slope.comp))#
    predict.intensity.luk.comp#
}#
general.prep.net <- function(spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    predict.frame <- data.frame(intensity)#
    colnames(predict.frame) <- c("Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    predict.intensity#
}#
#
simple.tc.prep.net <- function(data,spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts.net <- rowSums(spectra.line.table[,-1])#
    total.counts <- data.frame(data$Spectrum, total.counts.net)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    predict.intensity.tc#
}#
simple.comp.prep.net <- function(data, spectra.line.table, element.line, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.ag.fake.Spectrum <- data$Spectrum#
    compton.ag.fake.Compton <- rep(1, length(data$Spectrum))#
    compton.ag.fake <- data.frame(compton.ag.fake.Spectrum,compton.ag.fake.Compton)#
    colnames(compton.ag.fake) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame( intensity/compton.ag.fake$Compton)#
    colnames(predict.frame.comp) <- c("Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    predict.intensity.comp#
}#
###Prep Data#
lucas.simp.prep.net <- function(spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lucas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lucas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lucas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lucas.slope.table) <- c(names(spectra.line.table), "None")#
    lucas.intercept.table <- data.frame(rowSums(lucas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")]))#
    colnames(lucas.intercept.table) <- c("first")#
    lucas.intercept <- lucas.intercept.table$first#
    lucas.slope <- data.frame(lucas.slope.table[,slope.element.lines])#
    colnames(lucas.slope) <- slope.element.lines#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lucas.intercept))-lucas.intercept/(intensity+lucas.intercept)),lucas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lucas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lucas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lucas.slope))#
    predict.intensity.luk#
}#
lucas.tc.prep.net <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts.net <- rowSums(spectra.line.table[,-1])#
    total.counts <- data.frame(data$Spectrum, total.counts.net)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lucas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lucas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lucas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lucas.slope.table) <- c(names(spectra.line.table), "None")#
    lucas.intercept.table.tc <- data.frame(rowSums(lucas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")]))/total.counts$CPS#
    colnames(lucas.intercept.table.tc) <- c("first")#
    lucas.intercept.tc <- lucas.intercept.table.tc$first#
    lucas.slope.tc <- data.frame(lucas.slope.table[,slope.element.lines])/total.counts$CPS#
    colnames(lucas.slope.tc) <- slope.element.lines#
    predict.intensity.luc.tc <- data.frame(((1+intensity/(intensity+lucas.intercept.tc)-lucas.intercept.tc/(intensity+lucas.intercept.tc))),lucas.slope.tc)#
    colnames(predict.intensity.luc.tc) <- c("Intensity", names(lucas.slope.tc))#
    predict.intensity.luc.tc#
}#
lucas.comp.prep.net <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.ag.fake.Spectrum <- data$Spectrum#
    compton.ag.fake.Compton <- rep(1, length(data$Spectrum))#
    compton.ag.fake <- data.frame(compton.ag.fake.Spectrum,compton.ag.fake.Compton)#
    colnames(compton.ag.fake) <- c("Spectrum", "Compton")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lucas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lucas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lucas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lucas.slope.table) <- c(names(spectra.line.table), "None")#
    lucas.intercept.table.comp <- data.frame(rowSums(lucas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")]))/compton.ag.fake$Compton#
    colnames(lucas.intercept.table.comp) <- c("first")#
    lucas.intercept.comp <- lucas.intercept.table.comp$first#
    lucas.slope.comp <- data.frame(lucas.slope.table[,slope.element.lines])/compton.ag.fake$Compton#
    colnames(lucas.slope.comp) <- slope.element.lines#
    predict.frame.luc.comp <- data.frame(((1+predict.frame.comp$Intensity/(predict.frame.comp$Intensity+lucas.intercept.comp)-lucas.intercept.comp/(predict.frame.comp$Intensity+lucas.intercept.comp))),lucas.slope.comp)#
    colnames(predict.frame.luc.comp) <- c("Intensity", names(lucas.slope.comp))#
    predict.intensity.luc.comp <- data.frame(predict.frame.luc.comp$Intensity, lucas.slope.comp)#
    colnames(predict.intensity.luc.comp) <- c("Intensity", names(lucas.slope.comp))#
    predict.intensity.luc.comp#
}#
generatePredictions <- function(quant_file){#
    element.predictions <- element_predictions(count.table=count.table, the.cal=the.cal, elements=elements, variables=variables, valdata=valdata)#
    return(element.predictions)#
}#
#
element_predictions <- function(quant_file){#
    count.table <- quant_file[["Intensities"]]#
    count.table$Spectrum <- quant_file[["Values"]]["Spectrum"][,1]#
    the.cal <- quant_file[["calList"]]#
    elements <- names(quant_file[["calList"]])#
    variables <- ls(quant_file[["Intensities"]])#
    valdata <- quant_file[["Spectra"]]#
    predicted.list <- pblapply(elements, function (x)#
    if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.simp.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        ), cl=6L#
        )#
    }#
    )#
    predicted.vector <- unlist(predicted.list)#
    dim(predicted.vector) <- c(length(count.table$Spectrum), length(elements))#
    predicted.frame <- data.frame(count.table$Spectrum, predicted.vector)#
    colnames(predicted.frame) <- c("Spectrum",  elements)#
    #predicted.data.table <- data.table(predicted.frame)#
    #predicted.values <- t(predicted.values)#
    #predicted.data.table#
    return(predicted.frame)#
}#
element_estimates <- function(quant_file, newdata, spectra){#
    count.table <- newdata#
    count.table$Spectrum <- newdata["Spectrum"]#
    the.cal <- quant_file[["calList"]]#
    elements <- names(quant_file[["calList"]])#
    variables <- ls(quant_file[["Intensities"]])#
    valdata <- spectra#
    predicted.list <- pblapply(elements, function (x)#
    if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.simp.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        ), cl=6L#
        )#
    }#
    )#
    predicted.vector <- unlist(predicted.list)#
    dim(predicted.vector) <- c(length(count.table$Spectrum), length(elements))#
    predicted.frame <- data.frame(count.table$Spectrum, predicted.vector)#
    colnames(predicted.frame) <- c("Spectrum",  elements)#
    #predicted.data.table <- data.table(predicted.frame)#
    #predicted.values <- t(predicted.values)#
    #predicted.data.table#
    return(predicted.frame)#
}#
###900F4352#
F4352FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352FertAll.quant")#
F4352ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureLight.quant")#
F4352ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureTrace.quant")#
F4352PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352PlantLight.quant")#
F4352PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352PlantTrace.quant")#
F4352SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352SoilLight.quant")#
F4352SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352SoilTrace.quant")#
#
###900F4473#
F4473FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473FertAll.quant")#
F4473ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473ManureLight.quant")#
F4473ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473ManureTrace.quant")#
F4473PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473PlantLight.quant")#
F4473PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473PlantTrace.quant")#
F4473SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473SoilLight.quant")#
F4473SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473SoilTrace.quant")#
#
###900F4504#
F4504FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504FertAll.quant")#
F4504ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504ManureLight.quant")#
F4504ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504ManureTrace.quant")#
F4504PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504PlantLight.quant")#
F4504PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504PlantTrace.quant")#
F4504SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504SoilLight.quant")#
F4504SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504SoilTrace.quant")#
###900F4166#
F4166ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Rothamstead 5i 900F4166/R Cals/900F4166ManureLight.quant")#
F4166ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Rothamstead 5i 900F4166/R Cals/900F4166ManureTrace.quant")#
F4166PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Rothamstead 5i 900F4166/R Cals/900F4166PlantLight.quant")#
F4166PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Rothamstead 5i 900F4166/R Cals/900F4166PlantTrace.quant")#
F4166SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Rothamstead 5i 900F4166/R Cals/900F4166SoilLight.quant")#
F4166SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Rothamstead 5i 900F4166/R Cals/900F4166SoilTrace.quant")#
###Fertilizer#
FertAllIntensities <- rbind(F4352FertAll$Intensities, F4473FertAll$Intensities, F4504FertAll$Intensities)#
FertAllIntensities$Spectrum <- c(F4352FertAll[["Values"]]["Spectrum"][,1], F4473FertAll[["Values"]]["Spectrum"][,1], F4504FertAll[["Values"]]["Spectrum"][,1])#
FertAllIntensities$.id <- seq(1, length(FertAllIntensities[,1]), 1)#
FertAllValues <- rbind(F4352FertAll$Values, F4473FertAll$Values, F4504FertAll$Values)#
colnames(FertAllValues) <- gsub("*.K.alpha", "", colnames(FertAllValues))#
colnames(FertAllValues) <- gsub("*.L.alpha", "", colnames(FertAllValues))#
colnames(FertAllValues) <- gsub("*.L.beta", "", colnames(FertAllValues))#
FertAllValues$.id <- seq(1, length(FertAllValues[,1]), 1)#
FertAllCalCurves <- merge(FertAllIntensities, FertAllValues, by=".id")#
FertAllCalCurves$Instrument <- c(rep("F4352", length(F4352FertAll$Intensities[,1])), rep("F4473", length(F4352FertAll$Intensities[,1])), rep("F4504", length(F4352FertAll$Intensities[,1])))#
#FertAllCalCurves[FertAllCalCurves <= 0.0000] <- NA#
#
FertAllPredictions <- rbind(element_predictions(F4352FertAll), element_predictions(F4473FertAll), element_predictions(F4504FertAll))#
FertAllPredictions$.id <- seq(1, length(FertAllPredictions[,1]), 1)#
FertAllValCurves <- merge(FertAllPredictions, FertAllValues, by=".id")#
FertAllValCurves$Instrument <- c(rep("F4352", length(F4352FertAll$Values[,1])), rep("F4473", length(F4352FertAll$Values[,1])), rep("F4504", length(F4352FertAll$Values[,1])))#
#FertAllValCurves[FertAllValCurves <= 0.0000] <- NA#
#
FertAll <- list(FertAllCalCurves, FertAllValCurves)#
names(FertAll) <- c("CalCurves", "ValCurves")#
#
###Manure Light#
ManureLightIntensities <- rbind(F4352ManureLight$Intensities, F4473ManureLight$Intensities, F4504ManureLight$Intensities, F4166ManureLight$Intensities)#
ManureLightIntensities$Spectrum <- c(F4352ManureLight[["Values"]]["Spectrum"][,1], F4473ManureLight[["Values"]]["Spectrum"][,1], F4504ManureLight[["Values"]]["Spectrum"][,1], F4166ManureLight[["Values"]]["Spectrum"][,1])#
ManureLightIntensities$.id <- seq(1, length(ManureLightIntensities[,1]), 1)#
#
ManureLightValues <- rbind(F4352ManureLight$Values, F4473ManureLight$Values, F4504ManureLight$Values, F4166ManureLight$Values)#
colnames(ManureLightValues) <- gsub("*.K.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.beta", "", colnames(ManureLightValues))#
ManureLightValues$.id <- seq(1, length(ManureLightValues[,1]), 1)#
ManureLightCalCurves <- merge(ManureLightIntensities, ManureLightValues, by=".id")#
ManureLightCalCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Intensities[,1])), rep("F4473", length(F4352ManureLight$Intensities[,1])), rep("F4504", length(F4352ManureLight$Intensities[,1])), rep("F4166", length(F4166ManureLight$Intensities[,1])))#
#ManureLightCalCurves[ManureLightCalCurves <= 0.0000] <- NA#
#
ManureLightPredictions <- rbind(element_predictions(F4352ManureLight), element_predictions(F4473ManureLight), element_predictions(F4504ManureLight), element_predictions(F4166ManureLight))#
ManureLightPredictions$.id <- seq(1, length(ManureLightPredictions[,1]), 1)#
ManureLightValCurves <- merge(ManureLightPredictions, ManureLightValues, by=".id")#
ManureLightValCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Values[,1])), rep("F4473", length(F4352ManureLight$Values[,1])), rep("F4504", length(F4352ManureLight$Values[,1])), rep("F4166", length(F4166ManureLight$Values[,1])))#
#ManureLightValCurves[ManureLightValCurves <= 0.0000] <- NA#
#
ManureLight <- list(ManureLightCalCurves, ManureLightValCurves)#
names(ManureLight) <- c("CalCurves", "ValCurves")#
#
###Manure Trace#
ManureTraceIntensities <- rbind(F4352ManureTrace$Intensities, F4473ManureTrace$Intensities, F4504ManureTrace$Intensities, F4166ManureTrace$Intensities)#
ManureTraceIntensities$Spectrum <- c(F4352ManureTrace[["Values"]]["Spectrum"][,1], F4473ManureTrace[["Values"]]["Spectrum"][,1], F4504ManureTrace[["Values"]]["Spectrum"][,1], F4166ManureTrace[["Values"]]["Spectrum"][,1])#
ManureTraceIntensities$.id <- seq(1, length(ManureTraceIntensities[,1]), 1)#
#
ManureTraceValues <- rbind(F4352ManureTrace$Values, F4473ManureTrace$Values, F4504ManureTrace$Values, F4166ManureTrace$Values)#
colnames(ManureTraceValues) <- gsub("*.K.alpha", "", colnames(ManureTraceValues))#
colnames(ManureTraceValues) <- gsub("*.L.alpha", "", colnames(ManureTraceValues))#
colnames(ManureTraceValues) <- gsub("*.L.beta", "", colnames(ManureTraceValues))#
ManureTraceValues$.id <- seq(1, length(ManureTraceValues[,1]), 1)#
ManureTraceCalCurves <- merge(ManureTraceIntensities, ManureTraceValues, by=".id")#
ManureTraceCalCurves$Instrument <- c(rep("F4352", length(F4352ManureTrace$Intensities[,1])), rep("F4473", length(F4352ManureTrace$Intensities[,1])), rep("F4504", length(F4352ManureTrace$Intensities[,1])), rep("F4166", length(F4166ManureTrace$Intensities[,1])))#
#ManureTraceCalCurves[ManureTraceCalCurves <= 0.0000] <- NA#
#
ManureTracePredictions <- rbind(element_predictions(F4352ManureTrace), element_predictions(F4473ManureTrace), element_predictions(F4504ManureTrace), element_predictions(F4166ManureTrace))#
ManureTracePredictions$.id <- seq(1, length(ManureTracePredictions[,1]), 1)#
ManureTraceValCurves <- merge(ManureTracePredictions, ManureTraceValues, by=".id")#
ManureTraceValCurves$Instrument <- c(rep("F4352", length(F4352ManureTrace$Values[,1])), rep("F4473", length(F4352ManureTrace$Values[,1])), rep("F4504", length(F4352ManureTrace$Values[,1])), rep("F4166", length(F4166ManureTrace$Values[,1])))#
#ManureTraceValCurves[ManureTraceValCurves <= 0.0000] <- NA#
#
ManureTrace <- list(ManureTraceCalCurves, ManureTraceValCurves)#
names(ManureTrace) <- c("CalCurves", "ValCurves")#
#
###Plant Light#
PlantLightIntensities <- rbind(F4352PlantLight$Intensities, F4473PlantLight$Intensities, F4504PlantLight$Intensities, F4166PlantLight$Intensities)#
PlantLightIntensities$Spectrum <- c(F4352PlantLight[["Values"]]["Spectrum"][,1], F4473PlantLight[["Values"]]["Spectrum"][,1], F4504PlantLight[["Values"]]["Spectrum"][,1], F4166PlantLight[["Values"]]["Spectrum"][,1])#
PlantLightIntensities$.id <- seq(1, length(PlantLightIntensities[,1]), 1)#
#
PlantLightValues <- rbind(F4352PlantLight$Values, F4473PlantLight$Values, F4504PlantLight$Values, F4166PlantLight$Values)#
colnames(PlantLightValues) <- gsub("*.K.alpha", "", colnames(PlantLightValues))#
colnames(PlantLightValues) <- gsub("*.L.alpha", "", colnames(PlantLightValues))#
colnames(PlantLightValues) <- gsub("*.L.beta", "", colnames(PlantLightValues))#
PlantLightValues$.id <- seq(1, length(PlantLightValues[,1]), 1)#
PlantLightCalCurves <- merge(PlantLightIntensities, PlantLightValues, by=".id")#
PlantLightCalCurves$Instrument <- c(rep("F4352", length(F4352PlantLight$Intensities[,1])), rep("F4473", length(F4352PlantLight$Intensities[,1])), rep("F4504", length(F4352PlantLight$Intensities[,1])), rep("F4166", length(F4166PlantLight$Intensities[,1])))#
#PlantLightCalCurves[PlantLightCalCurves <= 0.0000] <- NA#
#
PlantLightPredictions <- rbind(element_predictions(F4352PlantLight), element_predictions(F4473PlantLight), element_predictions(F4504PlantLight), element_predictions(F4166PlantLight))#
PlantLightPredictions$.id <- seq(1, length(PlantLightPredictions[,1]), 1)#
PlantLightValCurves <- merge(PlantLightPredictions, PlantLightValues, by=".id")#
PlantLightValCurves$Instrument <- c(rep("F4352", length(F4352PlantLight$Values[,1])), rep("F4473", length(F4352PlantLight$Values[,1])), rep("F4504", length(F4352PlantLight$Values[,1])), rep("F4166", length(F4166PlantLight$Values[,1])))#
#PlantLightValCurves[PlantLightValCurves <= 0.0000] <- NA#
#
PlantLight <- list(PlantLightCalCurves, PlantLightValCurves)#
names(PlantLight) <- c("CalCurves", "ValCurves")#
#
###Plant Trace#
PlantTraceIntensities <- rbind(F4352PlantTrace$Intensities, F4473PlantTrace$Intensities, F4504PlantTrace$Intensities, F4166PlantTrace$Intensities)#
PlantTraceIntensities$Spectrum <- c(F4352PlantTrace[["Values"]]["Spectrum"][,1], F4473PlantTrace[["Values"]]["Spectrum"][,1], F4504PlantTrace[["Values"]]["Spectrum"][,1],  F4166PlantTrace[["Values"]]["Spectrum"][,1])#
PlantTraceIntensities$.id <- seq(1, length(PlantTraceIntensities[,1]), 1)#
#
PlantTraceValues <- rbind(F4352PlantTrace$Values, F4473PlantTrace$Values, F4504PlantTrace$Values, F4166PlantTrace$Values)#
colnames(PlantTraceValues) <- gsub("*.K.alpha", "", colnames(PlantTraceValues))#
colnames(PlantTraceValues) <- gsub("*.L.alpha", "", colnames(PlantTraceValues))#
colnames(PlantTraceValues) <- gsub("*.L.beta", "", colnames(PlantTraceValues))#
PlantTraceValues$.id <- seq(1, length(PlantTraceValues[,1]), 1)#
PlantTraceCalCurves <- merge(PlantTraceIntensities, PlantTraceValues, by=".id")#
PlantTraceCalCurves$Instrument <- c(rep("F4352", length(F4352PlantTrace$Intensities[,1])), rep("F4473", length(F4352PlantTrace$Intensities[,1])), rep("F4504", length(F4352PlantTrace$Intensities[,1])), rep("F4166", length(F4166PlantTrace$Intensities[,1])))#
#PlantTraceCalCurves[PlantTraceCalCurves <= 0.0000] <- NA#
#
PlantTracePredictions <- rbind(element_predictions(F4352PlantTrace), element_predictions(F4473PlantTrace), element_predictions(F4504PlantTrace), element_predictions(F4166PlantTrace))#
PlantTracePredictions$.id <- seq(1, length(PlantTracePredictions[,1]), 1)#
PlantTraceValCurves <- merge(PlantTracePredictions, PlantTraceValues, by=".id")#
PlantTraceValCurves$Instrument <- c(rep("F4352", length(F4352PlantTrace$Values[,1])), rep("F4473", length(F4352PlantTrace$Values[,1])), rep("F4504", length(F4352PlantTrace$Values[,1])), rep("F4166", length(F4166PlantTrace$Values[,1])))#
#PlantTraceValCurves[PlantTraceValCurves <= 0.0000] <- NA#
#
PlantTrace <- list(PlantTraceCalCurves, PlantTraceValCurves)#
names(PlantTrace) <- c("CalCurves", "ValCurves")#
###Soil Light#
SoilLightIntensities <- rbind(F4352SoilLight$Intensities, F4473SoilLight$Intensities, F4504SoilLight$Intensities, F4166SoilLight$Intensities)#
SoilLightIntensities$Spectrum <- c(F4352SoilLight[["Values"]]["Spectrum"][,1], F4473SoilLight[["Values"]]["Spectrum"][,1], F4504SoilLight[["Values"]]["Spectrum"][,1], F4166SoilLight[["Values"]]["Spectrum"][,1])#
SoilLightIntensities$.id <- seq(1, length(SoilLightIntensities[,1]), 1)#
#
SoilLightValues <- rbind(F4352SoilLight$Values, F4473SoilLight$Values, F4504SoilLight$Values, F4166SoilLight$Values)#
colnames(SoilLightValues) <- gsub("*.K.alpha", "", colnames(SoilLightValues))#
colnames(SoilLightValues) <- gsub("*.L.alpha", "", colnames(SoilLightValues))#
colnames(SoilLightValues) <- gsub("*.L.beta", "", colnames(SoilLightValues))#
SoilLightValues$.id <- seq(1, length(SoilLightValues[,1]), 1)#
SoilLightCalCurves <- merge(SoilLightIntensities, SoilLightValues, by=".id")#
SoilLightCalCurves$Instrument <- c(rep("F4352", length(F4352SoilLight$Intensities[,1])), rep("F4473", length(F4352SoilLight$Intensities[,1])), rep("F4504", length(F4352SoilLight$Intensities[,1])), rep("F4166", length(F4166SoilLight$Intensities[,1])))#
#SoilLightCalCurves[SoilLightCalCurves <= 0.0000] <- NA#
#
SoilLightPredictions <- rbind(element_predictions(F4352SoilLight), element_predictions(F4473SoilLight), element_predictions(F4504SoilLight), element_predictions(F4166SoilLight))#
SoilLightPredictions$.id <- seq(1, length(SoilLightPredictions[,1]), 1)#
SoilLightValCurves <- merge(SoilLightPredictions, SoilLightValues, by=".id")#
SoilLightValCurves$Instrument <- c(rep("F4352", length(F4352SoilLight$Values[,1])), rep("F4473", length(F4352SoilLight$Values[,1])), rep("F4504", length(F4352SoilLight$Values[,1])), rep("F4166", length(F4166SoilLight$Values[,1])))#
#SoilLightValCurves[SoilLightValCurves <= 0.0000] <- NA#
#
SoilLight <- list(SoilLightCalCurves, SoilLightValCurves)#
names(SoilLight) <- c("CalCurves", "ValCurves")#
###Soil Trace#
SoilTraceIntensities <- rbind(F4352SoilTrace$Intensities, F4473SoilTrace$Intensities, F4504SoilTrace$Intensities, F4166SoilTrace$Intensities)#
SoilTraceIntensities$Spectrum <- c(F4352SoilTrace[["Values"]]["Spectrum"][,1], F4473SoilTrace[["Values"]]["Spectrum"][,1], F4504SoilTrace[["Values"]]["Spectrum"][,1], F4166SoilTrace[["Values"]]["Spectrum"][,1])#
SoilTraceIntensities$.id <- seq(1, length(SoilTraceIntensities[,1]), 1)#
#
SoilTraceValues <- rbind(F4352SoilTrace$Values, F4473SoilTrace$Values, F4504SoilTrace$Values, F4166SoilTrace$Values)#
colnames(SoilTraceValues) <- gsub("*.K.alpha", "", colnames(SoilTraceValues))#
colnames(SoilTraceValues) <- gsub("*.L.alpha", "", colnames(SoilTraceValues))#
colnames(SoilTraceValues) <- gsub("*.L.beta", "", colnames(SoilTraceValues))#
SoilTraceValues$.id <- seq(1, length(SoilTraceValues[,1]), 1)#
SoilTraceCalCurves <- merge(SoilTraceIntensities, SoilTraceValues, by=".id")#
SoilTraceCalCurves$Instrument <- c(rep("F4352", length(F4352SoilTrace$Intensities[,1])), rep("F4473", length(F4352SoilTrace$Intensities[,1])), rep("F4504", length(F4352SoilTrace$Intensities[,1])), rep("F4166", length(F4166SoilTrace$Intensities[,1])))#
#
SoilTracePredictions <- rbind(element_predictions(F4352SoilTrace), element_predictions(F4473SoilTrace), element_predictions(F4504SoilTrace), element_predictions(F4166SoilTrace))#
SoilTracePredictions$.id <- seq(1, length(SoilTracePredictions[,1]), 1)#
SoilTraceValCurves <- merge(SoilTracePredictions, SoilTraceValues, by=".id")#
SoilTraceValCurves$Instrument <- c(rep("F4352", length(F4352SoilTrace$Values[,1])), rep("F4473", length(F4352SoilTrace$Values[,1])), rep("F4504", length(F4352SoilTrace$Values[,1])), rep("F4166", length(F4166SoilTrace$Values[,1])))#
#
SoilTrace <- list(SoilTraceCalCurves, SoilTraceValCurves)#
names(SoilTrace) <- c("CalCurves", "ValCurves")
Mg.frame <- ManureLight[["ValCurves"]]#
Mg.frame$Use <- c(F4352ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]], F4473ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]], F4504ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]], F4166ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]])#
Mg.frame <- Mg.frame[!is.na(Mg.frame$Use),]#
Mg.frame <- Mg.frame[Mg.frame$Use,]#
Mg.frame[Mg.frame <= 0.0000] <- NA#
Mg.frame <- Mg.frame[!is.na(Mg.frame$Mg),]#
#
Mg.plot <- ggplot(Mg.frame, aes(Mg.K.alpha*10000, Mg*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Magnesium ppm XRF",  labels = comma) +#
scale_y_continuous("Magnesium ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()
###Manure Light#
ManureLightIntensities <- rbind(F4352ManureLight$Intensities, F4473ManureLight$Intensities, F4504ManureLight$Intensities, F4166ManureLight$Intensities)#
ManureLightIntensities$Spectrum <- c(F4352ManureLight[["Values"]]["Spectrum"][,1], F4473ManureLight[["Values"]]["Spectrum"][,1], F4504ManureLight[["Values"]]["Spectrum"][,1], F4166ManureLight[["Values"]]["Spectrum"][,1])#
ManureLightIntensities$.id <- seq(1, length(ManureLightIntensities[,1]), 1)#
#
ManureLightValues <- rbind(F4352ManureLight$Values, F4473ManureLight$Values, F4504ManureLight$Values, F4166ManureLight$Values)#
colnames(ManureLightValues) <- gsub("*.K.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.beta", "", colnames(ManureLightValues))#
ManureLightValues$.id <- seq(1, length(ManureLightValues[,1]), 1)#
ManureLightCalCurves <- merge(ManureLightIntensities, ManureLightValues, by=".id")#
ManureLightCalCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Intensities[,1])), rep("F4473", length(F4352ManureLight$Intensities[,1])), rep("F4504", length(F4352ManureLight$Intensities[,1])), rep("F4166", length(F4166ManureLight$Intensities[,1])))#
#ManureLightCalCurves[ManureLightCalCurves <= 0.0000] <- NA#
#
ManureLightPredictions <- rbind(element_predictions(F4352ManureLight), element_predictions(F4473ManureLight), element_predictions(F4504ManureLight), element_predictions(F4166ManureLight))#
ManureLightPredictions$.id <- seq(1, length(ManureLightPredictions[,1]), 1)#
ManureLightValCurves <- merge(ManureLightPredictions, ManureLightValues, by=".id")#
ManureLightValCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Values[,1])), rep("F4473", length(F4473ManureLight$Values[,1])), rep("F4504", length(F4504ManureLight$Values[,1])), rep("F4166", length(F4166ManureLight$Values[,1])))#
#ManureLightValCurves[ManureLightValCurves <= 0.0000] <- NA#
#
ManureLight <- list(ManureLightCalCurves, ManureLightValCurves)#
names(ManureLight) <- c("CalCurves", "ValCurves")#
#
###Manure Trace#
ManureTraceIntensities <- rbind(F4352ManureTrace$Intensities, F4473ManureTrace$Intensities, F4504ManureTrace$Intensities, F4166ManureTrace$Intensities)#
ManureTraceIntensities$Spectrum <- c(F4352ManureTrace[["Values"]]["Spectrum"][,1], F4473ManureTrace[["Values"]]["Spectrum"][,1], F4504ManureTrace[["Values"]]["Spectrum"][,1], F4166ManureTrace[["Values"]]["Spectrum"][,1])#
ManureTraceIntensities$.id <- seq(1, length(ManureTraceIntensities[,1]), 1)#
#
ManureTraceValues <- rbind(F4352ManureTrace$Values, F4473ManureTrace$Values, F4504ManureTrace$Values, F4166ManureTrace$Values)#
colnames(ManureTraceValues) <- gsub("*.K.alpha", "", colnames(ManureTraceValues))#
colnames(ManureTraceValues) <- gsub("*.L.alpha", "", colnames(ManureTraceValues))#
colnames(ManureTraceValues) <- gsub("*.L.beta", "", colnames(ManureTraceValues))#
ManureTraceValues$.id <- seq(1, length(ManureTraceValues[,1]), 1)#
ManureTraceCalCurves <- merge(ManureTraceIntensities, ManureTraceValues, by=".id")#
ManureTraceCalCurves$Instrument <- c(rep("F4352", length(F4352ManureTrace$Intensities[,1])), rep("F4473", length(F4473ManureTrace$Intensities[,1])), rep("F4504", length(F4504ManureTrace$Intensities[,1])), rep("F4166", length(F4166ManureTrace$Intensities[,1])))#
#ManureTraceCalCurves[ManureTraceCalCurves <= 0.0000] <- NA#
#
ManureTracePredictions <- rbind(element_predictions(F4352ManureTrace), element_predictions(F4473ManureTrace), element_predictions(F4504ManureTrace), element_predictions(F4166ManureTrace))#
ManureTracePredictions$.id <- seq(1, length(ManureTracePredictions[,1]), 1)#
ManureTraceValCurves <- merge(ManureTracePredictions, ManureTraceValues, by=".id")#
ManureTraceValCurves$Instrument <- c(rep("F4352", length(F4352ManureTrace$Values[,1])), rep("F4473", length(F4352ManureTrace$Values[,1])), rep("F4504", length(F4352ManureTrace$Values[,1])), rep("F4166", length(F4166ManureTrace$Values[,1])))#
#ManureTraceValCurves[ManureTraceValCurves <= 0.0000] <- NA#
#
ManureTrace <- list(ManureTraceCalCurves, ManureTraceValCurves)#
names(ManureTrace) <- c("CalCurves", "ValCurves")
Mg.frame <- ManureLight[["ValCurves"]]#
Mg.frame$Use <- c(F4352ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]], F4473ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]], F4504ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]], F4166ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]])#
Mg.frame <- Mg.frame[!is.na(Mg.frame$Use),]#
Mg.frame <- Mg.frame[Mg.frame$Use,]#
Mg.frame[Mg.frame <= 0.0000] <- NA#
Mg.frame <- Mg.frame[!is.na(Mg.frame$Mg),]#
#
Mg.plot <- ggplot(Mg.frame, aes(Mg.K.alpha*10000, Mg*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Magnesium ppm XRF",  labels = comma) +#
scale_y_continuous("Magnesium ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()
F4352ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureLight.quant")#
F4352ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureTrace.quant")
###Manure Light#
ManureLightIntensities <- rbind(F4352ManureLight$Intensities, F4473ManureLight$Intensities, F4504ManureLight$Intensities, F4166ManureLight$Intensities)#
ManureLightIntensities$Spectrum <- c(F4352ManureLight[["Values"]]["Spectrum"][,1], F4473ManureLight[["Values"]]["Spectrum"][,1], F4504ManureLight[["Values"]]["Spectrum"][,1], F4166ManureLight[["Values"]]["Spectrum"][,1])#
ManureLightIntensities$.id <- seq(1, length(ManureLightIntensities[,1]), 1)#
#
ManureLightValues <- rbind(F4352ManureLight$Values, F4473ManureLight$Values, F4504ManureLight$Values, F4166ManureLight$Values)#
colnames(ManureLightValues) <- gsub("*.K.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.beta", "", colnames(ManureLightValues))#
ManureLightValues$.id <- seq(1, length(ManureLightValues[,1]), 1)#
ManureLightCalCurves <- merge(ManureLightIntensities, ManureLightValues, by=".id")#
ManureLightCalCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Intensities[,1])), rep("F4473", length(F4352ManureLight$Intensities[,1])), rep("F4504", length(F4352ManureLight$Intensities[,1])), rep("F4166", length(F4166ManureLight$Intensities[,1])))#
#ManureLightCalCurves[ManureLightCalCurves <= 0.0000] <- NA#
#
ManureLightPredictions <- rbind(element_predictions(F4352ManureLight), element_predictions(F4473ManureLight), element_predictions(F4504ManureLight), element_predictions(F4166ManureLight))#
ManureLightPredictions$.id <- seq(1, length(ManureLightPredictions[,1]), 1)#
ManureLightValCurves <- merge(ManureLightPredictions, ManureLightValues, by=".id")#
ManureLightValCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Values[,1])), rep("F4473", length(F4473ManureLight$Values[,1])), rep("F4504", length(F4504ManureLight$Values[,1])), rep("F4166", length(F4166ManureLight$Values[,1])))#
#ManureLightValCurves[ManureLightValCurves <= 0.0000] <- NA#
#
ManureLight <- list(ManureLightCalCurves, ManureLightValCurves)#
names(ManureLight) <- c("CalCurves", "ValCurves")#
#
###Manure Trace#
ManureTraceIntensities <- rbind(F4352ManureTrace$Intensities, F4473ManureTrace$Intensities, F4504ManureTrace$Intensities, F4166ManureTrace$Intensities)#
ManureTraceIntensities$Spectrum <- c(F4352ManureTrace[["Values"]]["Spectrum"][,1], F4473ManureTrace[["Values"]]["Spectrum"][,1], F4504ManureTrace[["Values"]]["Spectrum"][,1], F4166ManureTrace[["Values"]]["Spectrum"][,1])#
ManureTraceIntensities$.id <- seq(1, length(ManureTraceIntensities[,1]), 1)#
#
ManureTraceValues <- rbind(F4352ManureTrace$Values, F4473ManureTrace$Values, F4504ManureTrace$Values, F4166ManureTrace$Values)#
colnames(ManureTraceValues) <- gsub("*.K.alpha", "", colnames(ManureTraceValues))#
colnames(ManureTraceValues) <- gsub("*.L.alpha", "", colnames(ManureTraceValues))#
colnames(ManureTraceValues) <- gsub("*.L.beta", "", colnames(ManureTraceValues))#
ManureTraceValues$.id <- seq(1, length(ManureTraceValues[,1]), 1)#
ManureTraceCalCurves <- merge(ManureTraceIntensities, ManureTraceValues, by=".id")#
ManureTraceCalCurves$Instrument <- c(rep("F4352", length(F4352ManureTrace$Intensities[,1])), rep("F4473", length(F4473ManureTrace$Intensities[,1])), rep("F4504", length(F4504ManureTrace$Intensities[,1])), rep("F4166", length(F4166ManureTrace$Intensities[,1])))#
#ManureTraceCalCurves[ManureTraceCalCurves <= 0.0000] <- NA#
#
ManureTracePredictions <- rbind(element_predictions(F4352ManureTrace), element_predictions(F4473ManureTrace), element_predictions(F4504ManureTrace), element_predictions(F4166ManureTrace))#
ManureTracePredictions$.id <- seq(1, length(ManureTracePredictions[,1]), 1)#
ManureTraceValCurves <- merge(ManureTracePredictions, ManureTraceValues, by=".id")#
ManureTraceValCurves$Instrument <- c(rep("F4352", length(F4352ManureTrace$Values[,1])), rep("F4473", length(F4352ManureTrace$Values[,1])), rep("F4504", length(F4352ManureTrace$Values[,1])), rep("F4166", length(F4166ManureTrace$Values[,1])))#
#ManureTraceValCurves[ManureTraceValCurves <= 0.0000] <- NA#
#
ManureTrace <- list(ManureTraceCalCurves, ManureTraceValCurves)#
names(ManureTrace) <- c("CalCurves", "ValCurves")
Mg.frame <- ManureLight[["ValCurves"]]#
Mg.frame$Use <- c(F4352ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]], F4473ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]], F4504ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]], F4166ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]])#
Mg.frame <- Mg.frame[!is.na(Mg.frame$Use),]#
Mg.frame <- Mg.frame[Mg.frame$Use,]#
Mg.frame[Mg.frame <= 0.0000] <- NA#
Mg.frame <- Mg.frame[!is.na(Mg.frame$Mg),]#
#
Mg.plot <- ggplot(Mg.frame, aes(Mg.K.alpha*10000, Mg*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Magnesium ppm XRF",  labels = comma) +#
scale_y_continuous("Magnesium ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()
Mg.plot
Cr.frame <- ManureTrace[["ValCurves"]]#
Cr.frame$Use <- c(F4352ManureTrace[["calList"]][["Cr.K.alpha"]][[1]][["StandardsUsed"]], F4473ManureTrace[["calList"]][["Cr.K.alpha"]][[1]][["StandardsUsed"]], F4504ManureTrace[["calList"]][["Cr.K.alpha"]][[1]][["StandardsUsed"]], F4166ManureTrace[["calList"]][["Cr.K.alpha"]][[1]][["StandardsUsed"]])#
Cr.frame <- Cr.frame[!is.na(Cr.frame$Use),]#
Cr.frame <- Cr.frame[Cr.frame$Use,]#
Cr.frame[Cr.frame <= 0.0000] <- NA#
Cr.frame <- Cr.frame[!is.na(Cr.frame$Cr),]#
#
Cr.plot <- ggplot(Cr.frame, aes(Cr.K.alpha*10000, Cr*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Chromium ppm XRF",  labels = comma) +#
scale_y_continuous("Chromium ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()
Cr.plot
shiny::runApp("~/GitHub/Compass")
shiny::runApp("~/GitHub/Cezanne")
a.cal <- readRDS("~/Desktop/Projects/all harry scan data/ENG015MudrockLightNet.quant")
ls(a.cal)
names(a.cal[["Intensities"]])
ls(a.cal[["calList"]])
a.cal <- readRDS("~/Desktop/Projects/all harry scan data/ENG015MudrockLightNet.quant")
proto.fish <- loadWorkbook(file=~/Desktop/Projects/all harry scan data/LARGEST TRIBAL 15 35 MAJ HE MON AM 9 11 4770.25 4771.75 PROCESSED B/LARGEST TRIBAL 15 35 MAJ HE MON AM 9 11 4770.25 4771.75.xlsx"")
proto.fish <- loadWorkbook(file=""~/Desktop/Projects/all harry scan data/LARGEST TRIBAL 15 35 MAJ HE MON AM 9 11 4770.25 4771.75 PROCESSED B/LARGEST TRIBAL 15 35 MAJ HE MON AM 9 11 4770.25 4771.75.xlsx")
proto.fish <- loadWorkbook(file="~/Desktop/Projects/all harry scan data/LARGEST TRIBAL 15 35 MAJ HE MON AM 9 11 4770.25 4771.75 PROCESSED B/LARGEST TRIBAL 15 35 MAJ HE MON AM 9 11 4770.25 4771.75.xlsx")
library(openxlsx)
proto.fish <- loadWorkbook(file="~/Desktop/Projects/all harry scan data/LARGEST TRIBAL 15 35 MAJ HE MON AM 9 11 4770.25 4771.75 PROCESSED B/LARGEST TRIBAL 15 35 MAJ HE MON AM 9 11 4770.25 4771.75.xlsx")
just.fish <- readWorkbook(proto.fish, sheet=2)#
        new.fish <- just.fish[,-1]#
        new.fish$x <- sapply(just.fish[,1], read_csv_x)#
        new.fish$y <- sapply(just.fish[,1], read_csv_y)#
        final.fish <- new.fish[,c("x", "y", names(just.fish[,-1]))]
read_csv_x <- function(filename) {#
    x <- as.numeric(substr(strsplit(filename,"\\X ")[[1]][2], 1, 6))#
    x#
}#
#
read_csv_y <- function(filename) {#
    y <- as.numeric(substr(strsplit(filename,"\\Y ")[[1]][2], 1, 6))#
    y#
}
just.fish <- readWorkbook(proto.fish, sheet=2)#
        new.fish <- just.fish[,-1]#
        new.fish$x <- sapply(just.fish[,1], read_csv_x)#
        new.fish$y <- sapply(just.fish[,1], read_csv_y)#
        final.fish <- new.fish[,c("x", "y", names(just.fish[,-1]))]
the.cal <- a.cal[["calList"]]
count.table <- final.fish
elements.cal <- ls(the.cal)
elements <- elements.cal[!is.na(match(elements.cal, ls(count.table)))]
elements
variables <- ls(a.cal[["Intensities"]])
variables
va.data <- count.table
predicted.list <- pblapply(elements, function (x)#
    if(the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }, cl=6L#
    )
library(pbapply)
predicted.list <- pblapply(elements, function (x)#
    if(the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }, cl=6L#
    )
####Cal Models#
#
linear.simp <- function(concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    predict.frame <- data.frame(concentration, intensity)#
    colnames(predict.frame) <- c("Concentration", "Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    cal.lm <- lm(predict.frame$Concentration~predict.frame$Intensity)#
    cal.lm#
}#
#
poly.simp <- function(concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    predict.frame <- data.frame(concentration, intensity)#
    colnames(predict.frame) <- c("Concentration", "Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    cal.lm.poly <- lm(predict.frame$Concentration~poly(predict.frame$Intensity, 2))#
    cal.lm.poly#
}#
#
lucas.simp <- function(concentration.table, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    lucas.intercept.table <- data.frame(rowSums(lucas.intercept.table.x[intercept.element.lines]))#
    colnames(lucas.intercept.table) <- c("first")#
    lucas.intercept <- lucas.intercept.table$first#
    lucas.slope <- data.frame(lucas.slope.table[slope.element.lines])#
    predict.frame.luk <- data.frame(concentration, ((1+intensity/(intensity+lucas.intercept))-lucas.intercept/(intensity+lucas.intercept)),lucas.slope)#
    colnames(predict.frame.luk) <- c("Concentration", "Intensity", names(lucas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lucas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lucas.slope))#
    lucas.lm <- lm(Concentration~., data=predict.frame.luk)#
    lucas.lm#
}#
linear.tc <- function(concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    total.counts <- aggregate(CPS~Spectrum, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(concentration, intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Concentration", "Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    cal.lm.tc <- lm(predict.frame.tc$Concentration~predict.frame.tc$Intensity)#
    cal.lm.tc#
}#
#
poly.tc <- function(concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    total.counts <- aggregate(CPS~Spectrum, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(concentration, intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Concentration", "Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    cal.lm.poly.tc <- lm(predict.frame.tc$Concentration~poly(predict.frame.tc$Intensity, 2))#
    cal.lm.poly.tc#
}#
lucas.tc <- function(concentration.table, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    lucas.intercept.table.tc <- data.frame(rowSums(lucas.intercept.table.x[intercept.element.lines]))/total.counts$CPS#
    colnames(lucas.intercept.table.tc) <- c("first")#
    lucas.intercept.tc <- lucas.intercept.table.tc$first#
    lucas.slope.tc <- data.frame(lucas.slope.table[slope.element.lines])/total.counts$CPS#
    predict.frame.luk.tc <- data.frame(concentration, ((intensity/total.counts$CPS-lucas.intercept.tc)/(intensity/total.counts$CPS+lucas.intercept.tc)),lucas.slope.tc)#
    colnames(predict.frame.luk.tc) <- c("Concentration", "Intensity", names(lucas.slope.tc))#
    predict.intensity.luk.tc <- data.frame(predict.frame.luk.tc$Intensity, lucas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lucas.slope.tc))#
    lucas.lm.tc <- lm(Concentration~., data=predict.frame.luk.tc)#
    lucas.lm.tc#
}#
#
linear.comp <- function(data, concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    compton.norm <- subset(data$CPS, !(data$Energy < input$comptonmin | data$Energy > input$comptonmax))#
    compton.file <- subset(data$Spectrum, !(data$Energy < input$comptonmin | data$Energy > input$comptonmax))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame(concentration, intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Concentration", "Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    cal.lm.comp <- lm(predict.frame.comp$Concentration~predict.frame.comp$Intensity)#
    cal.lm.comp#
}#
#
poly.comp <- function(data, concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    compton.norm <- subset(data$CPS, !(data$Energy < input$comptonmin | data$Energy > input$comptonmax))#
    compton.file <- subset(data$Spectrum, !(data$Energy < input$comptonmin | data$Energy > input$comptonmax))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame(concentration, intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Concentration", "Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    cal.lm.poly.comp <- lm(predict.frame.comp$Concentration~poly(predict.frame.comp$Intensity, 2))#
    cal.lm.poly.comp#
}#
#
lucas.comp <- function(data, concentration.table, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    compton.norm <- subset(data$CPS, !(data$Energy < input$comptonmin | data$Energy > input$comptonmax))#
    compton.file <- subset(data$Spectrum, !(data$Energy < input$comptonmin | data$Energy > input$comptonmax))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    lucas.intercept.table.comp <- data.frame(rowSums(lucas.intercept.table.x[intercept.element.lines]))/compton.frame.ag$Compton#
    colnames(lucas.intercept.table.comp) <- c("first")#
    lucas.intercept.comp <- lucas.intercept.table.comp$first#
    lucas.slope.comp <- data.frame(lucas.slope.table[slope.element.lines])/compton.frame.ag$Compton#
    predict.frame.luk.comp <- data.frame(concentration, ((1+intensity/compton.frame.ag$Compton)/(intensity/compton.frame.ag$Compton+lucas.intercept.comp)-lucas.intercept.comp/(intensity/compton.frame.ag$Compton+lucas.intercept.comp)),lucas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Concentration", "Intensity", names(lucas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lucas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lucas.slope.comp))#
    lucas.lm.comp <- lm(Concentration~., data=predict.frame.luk.comp)#
    lucas.lm.comp#
}#
################
###Prep Data####
################
################
###Raw Spectra###
################
general.prep <- function(spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    predict.frame <- data.frame(intensity)#
    colnames(predict.frame) <- c("Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    predict.intensity#
}#
#
simple.tc.prep <- function(data,spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Spectrum, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    predict.intensity.tc#
}#
simple.comp.prep <- function(data, spectra.line.table, element.line, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Spectrum, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame( intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    predict.intensity.comp#
}#
###Prep Data#
lucas.simp.prep <- function(spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lucas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lucas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lucas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lucas.slope.table) <- c(names(spectra.line.table), "None")#
    lucas.intercept.table <- data.frame(rowSums(lucas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")]))#
    colnames(lucas.intercept.table) <- c("first")#
    lucas.intercept <- lucas.intercept.table$first#
    lucas.slope <- data.frame(lucas.slope.table[,slope.element.lines])#
    colnames(lucas.slope) <- slope.element.lines#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lucas.intercept))-lucas.intercept/(intensity+lucas.intercept)),lucas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lucas.slope))#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lucas.intercept)-lucas.intercept/(intensity+lucas.intercept))),lucas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lucas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lucas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lucas.slope))#
    predict.intensity.luk#
}#
lucas.tc.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Spectrum, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lucas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lucas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lucas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lucas.slope.table) <- c(names(spectra.line.table), "None")#
    lucas.intercept.table.tc <- data.frame(rowSums(lucas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")]))/total.counts$CPS#
    colnames(lucas.intercept.table.tc) <- c("first")#
    lucas.intercept.tc <- lucas.intercept.table.tc$first#
    lucas.slope.tc <- data.frame(lucas.slope.table[,slope.element.lines])/total.counts$CPS#
    colnames(lucas.slope.tc) <- slope.element.lines#
    predict.intensity.luk.tc <- data.frame(((1+intensity/(intensity+lucas.intercept.tc)-lucas.intercept.tc/(intensity+lucas.intercept.tc))),lucas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lucas.slope.tc))#
    predict.intensity.luk.tc#
}#
lucas.comp.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Spectrum, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lucas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lucas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lucas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lucas.slope.table) <- c(names(spectra.line.table), "None")#
    lucas.intercept.table.comp <- data.frame(rowSums(lucas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")])/compton.frame.ag$Compton)#
    colnames(lucas.intercept.table.comp) <- c("first")#
    lucas.intercept.comp <- lucas.intercept.table.comp$first#
    lucas.slope.comp <- data.frame(lucas.slope.table[,slope.element.lines]/compton.frame.ag$Compton)#
    colnames(lucas.slope.comp) <- slope.element.lines#
    predict.frame.luk.comp <- data.frame(((1+intensity/compton.frame.ag$Compton)/(intensity/compton.frame.ag$Compton+lucas.intercept.comp)-lucas.intercept.comp/(intensity/compton.frame.ag$Compton+lucas.intercept.comp)),lucas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Intensity", names(lucas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lucas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lucas.slope.comp))#
    predict.intensity.luk.comp#
}#
################
###Prep Data####
################
################
###Net Counts###
################
general.prep.net <- function(spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    predict.frame <- data.frame(intensity)#
    colnames(predict.frame) <- c("Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    predict.intensity#
}#
#
simple.tc.prep.net <- function(data,spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts.net <- rowSums(spectra.line.table[length(spectra.line.table)])#
    total.counts <- data.frame(data$Spectrum, total.counts.net)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    predict.intensity.tc#
}#
simple.comp.prep.net <- function(data, spectra.line.table, element.line, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.ag.fake.Spectrum <- data$Spectrum#
    compton.ag.fake.Compton <- rep(1, length(data$Spectrum))#
    compton.ag.fake <- data.frame(compton.ag.fake.Spectrum,compton.ag.fake.Compton)#
    colnames(compton.ag.fake) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame( intensity/compton.ag.fake$Compton)#
    colnames(predict.frame.comp) <- c("Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    predict.intensity.comp#
}#
###Prep Data#
lucas.simp.prep.net <- function(spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lucas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lucas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lucas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lucas.slope.table) <- c(names(spectra.line.table), "None")#
    lucas.intercept.table <- data.frame(rowSums(lucas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")]))#
    colnames(lucas.intercept.table) <- c("first")#
    lucas.intercept <- lucas.intercept.table$first#
    lucas.slope <- data.frame(lucas.slope.table[,slope.element.lines])#
    colnames(lucas.slope) <- slope.element.lines#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lucas.intercept))-lucas.intercept/(intensity+lucas.intercept)),lucas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lucas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lucas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lucas.slope))#
    predict.intensity.luk#
}#
lucas.tc.prep.net <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts.net <- rowSums(spectra.line.table[length(spectra.line.table)])#
    total.counts <- data.frame(data$Spectrum, total.counts.net)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lucas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lucas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lucas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lucas.slope.table) <- c(names(spectra.line.table), "None")#
    lucas.intercept.table.tc <- data.frame(rowSums(lucas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")]))/total.counts$CPS#
    colnames(lucas.intercept.table.tc) <- c("first")#
    lucas.intercept.tc <- lucas.intercept.table.tc$first#
    lucas.slope.tc <- data.frame(lucas.slope.table[,slope.element.lines])/total.counts$CPS#
    colnames(lucas.slope.tc) <- slope.element.lines#
    predict.intensity.luk.tc <- data.frame(((1+intensity/(intensity+lucas.intercept.tc)-lucas.intercept.tc/(intensity+lucas.intercept.tc))),lucas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lucas.slope.tc))#
    predict.intensity.luk.tc#
}#
lucas.comp.prep.net <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.ag.fake.Spectrum <- data$Spectrum#
    compton.ag.fake.Compton <- rep(1, length(data$Spectrum))#
    compton.ag.fake <- data.frame(compton.ag.fake.Spectrum,compton.ag.fake.Compton)#
    colnames(compton.ag.fake) <- c("Spectrum", "Compton")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lucas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lucas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lucas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lucas.slope.table) <- c(names(spectra.line.table), "None")#
    lucas.intercept.table.comp <- data.frame(rowSums(lucas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")]))/compton.ag.fake$Compton#
    colnames(lucas.intercept.table.comp) <- c("first")#
    lucas.intercept.comp <- lucas.intercept.table.comp$first#
    lucas.slope.comp <- data.frame(lucas.slope.table[,slope.element.lines])/compton.ag.fake$Compton#
    colnames(lucas.slope.comp) <- slope.element.lines#
    predict.frame.luk.comp <- data.frame(((1+predict.frame.comp$Intensity/(predict.frame.comp$Intensity+lucas.intercept.comp)-lucas.intercept.comp/(predict.frame.comp$Intensity+lucas.intercept.comp))),lucas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Intensity", names(lucas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lucas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lucas.slope.comp))#
    predict.intensity.luk.comp#
}
predicted.list <- pblapply(elements, function (x)#
    if(the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }, cl=6L#
    )
predicted.vector <- unlist(predicted.list)
dim(predicted.vector) <- c(length(count.table[,1]), length(elements))
predicted.frame <- data.frame(count.table[,1:2], predicted.vector)
colnames(predicted.frame) <- c("x", "y", elements)
head(predicted.frame)
val.data <- final.fish
norm.val <- val.data[,"Rh.L1"]/mean(the.cal$Spectra[,"Rh.L1"])*6
ls(the.cal$Spectra)
ls(the.cal[["Spectra"]])
ls(the.cal[["Intensities"]])
norm.val <- val.data[,"Rh.L1"]/mean(a.cal$Spectra[,"Rh.L1"])*6
head(norm.val)
library(pbapply)#
library(reshape2)#
library(TTR)#
library(plyr)#
library(dplyr)#
library(data.table)#
library(shiny)#
library(ggplot2)#
library(gghighlight)#
library(scales)#
library(gridExtra)#
library(Cairo)#
layOut = function(...) {#
    require(grid)#
    x <- list(...)#
    n <- max(sapply(x, function(x) max(x[[2]])))#
    p <- max(sapply(x, function(x) max(x[[3]])))#
    pushViewport(viewport(layout = grid.layout(n, p)))#
    for (i in seq_len(length(x))) {#
        print(x[[i]][[1]], vp = viewport(layout.pos.row = x[[i]][[2]],#
        layout.pos.col = x[[i]][[3]]))#
    }#
}#
#
file.0 <- function(file) {#
    if (length(file) > 0)#
    {#
        return(file)#
    }else{#
        return(levels(file))#
    }#
}#
#
is.0 <- function(cps, file) {#
    file.0 <- function(file) {#
        if (length(file) > 0)#
        {#
            return(file)#
        }else{#
            return(levels(file))#
        }#
    }#
    if (length(cps) > 0)#
    {#
        hope <-data.frame(cps, file.0(file))#
        return(hope)#
    } else {#
        empty <- rep(0, length(file.0(file)))#
        framed <- data.frame(empty, file.0(file))#
        return(framed)#
    }#
}#
lm_eqn = function(m) {#
    l <- list(a = format(coef(m)[1], digits = 2),#
    b = format(abs(coef(m)[2]), digits = 2),#
    r2 = format(summary(m)$r.squared, digits = 3));#
    eq <- substitute(italic(C)[i] == a + b %.% italic(I)[i]*","~~italic(r)^2~"="~r2,l)#
    as.character(as.expression(eq));#
}#
#
lm_eqn_poly = function(m) {#
    l <- list(a = format(coef(m)[1], digits = 2),#
    b = format(abs(coef(m)[2]), digits = 2),#
    c = format(abs(coef(m)[3]), digits = 2),#
    r2 = format(summary(m)$r.squared, digits = 3));#
    eq <- substitute(italic(C)[i] == a + c %.% italic(I)[i]^2 + b %.% italic(I)[i]*","~~italic(r)^2~"="~r2,l)#
    as.character(as.expression(eq));#
}#
#
lm_eqn_val = function(m) {#
    l <- list(a = format(coef(m)[1], digits = 2),#
    b = format(abs(coef(m)[2]), digits = 2),#
    r2 = format(summary(m)$r.squared, digits = 3));#
    eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,l)#
    as.character(as.expression(eq));#
}#
elementGrabKalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabKbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-beta", sep=" "))#
    hold.ag#
}#
#
elementGrabLalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][,1]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabLbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[12][1,]-0.02 | data$Energy > elementLine[14][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[12][1,]-0.02 | data$Energy > elementLine[14][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-beta", sep=" "))#
    hold.ag#
}#
#
elementGrab <- function(element.line, data) {#
    element <- strsplit(x=element.line, split="\\.")[[1]][1]#
    destination <- strsplit(x=element.line, split="\\.")[[1]][2]#
    distance <- strsplit(x=element.line, split="\\.")[[1]][3]#
    elementSelection <- if(destination=="K" && distance=="alpha"){#
        elementGrabKalpha(element, data)#
    } else if(destination=="K" && distance=="beta"){#
        elementGrabKbeta(element, data)#
    } else if(destination=="L" && distance=="alpha"){#
        elementGrabLalpha(element, data)#
    } else if (destination=="L" && distance=="beta"){#
        elementGrabLbeta(element, data)#
    }#
    elementSelection#
}#
general.prep <- function(spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    predict.frame <- data.frame(intensity)#
    colnames(predict.frame) <- c("Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    predict.intensity#
}#
#
simple.tc.prep <- function(data,spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Sample, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    predict.intensity.tc#
}#
simple.comp.prep <- function(data, spectra.line.table, element.line, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Spectrum, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame( intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    predict.intensity.comp#
}#
###Prep Data#
lucas.simp.prep <- function(spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lucas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lucas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lucas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lucas.slope.table) <- c(names(spectra.line.table), "None")#
    lucas.intercept.table <- data.frame(rowSums(lucas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE))#
    colnames(lucas.intercept.table) <- c("first")#
    lucas.intercept <- lucas.intercept.table$first#
    lucas.slope <- data.frame(lucas.slope.table[,slope.element.lines])#
    colnames(lucas.slope) <- slope.element.lines#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lucas.intercept))-lucas.intercept/(intensity+lucas.intercept)),lucas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lucas.slope))#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lucas.intercept)-lucas.intercept/(intensity+lucas.intercept))),lucas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lucas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lucas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lucas.slope))#
    predict.intensity.luk#
}#
lucas.tc.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Sample, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lucas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lucas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lucas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lucas.slope.table) <- c(names(spectra.line.table), "None")#
    lucas.intercept.table.tc <- data.frame(rowSums(lucas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE))/total.counts$CPS#
    colnames(lucas.intercept.table.tc) <- c("first")#
    lucas.intercept.tc <- lucas.intercept.table.tc$first#
    lucas.slope.tc <- data.frame(lucas.slope.table[,slope.element.lines])/total.counts$CPS#
    colnames(lucas.slope.tc) <- slope.element.lines#
    predict.intensity.luk.tc <- data.frame(((1+intensity/(intensity+lucas.intercept.tc)-lucas.intercept.tc/(intensity+lucas.intercept.tc))),lucas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lucas.slope.tc))#
    predict.intensity.luk.tc#
}#
lucas.comp.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Spectrum, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lucas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lucas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lucas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lucas.slope.table) <- c(names(spectra.line.table), "None")#
    lucas.intercept.table.comp <- data.frame(rowSums(lucas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE)/compton.frame.ag$Compton)#
    colnames(lucas.intercept.table.comp) <- c("first")#
    lucas.intercept.comp <- lucas.intercept.table.comp$first#
    lucas.slope.comp <- data.frame(lucas.slope.table[,slope.element.lines]/compton.frame.ag$Compton)#
    colnames(lucas.slope.comp) <- slope.element.lines#
    predict.frame.luk.comp <- data.frame(((1+intensity/compton.frame.ag$Compton)/(intensity/compton.frame.ag$Compton+lucas.intercept.comp)-lucas.intercept.comp/(intensity/compton.frame.ag$Compton+lucas.intercept.comp)),lucas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Intensity", names(lucas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lucas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lucas.slope.comp))#
    predict.intensity.luk.comp#
}#
general.prep.net <- function(spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    predict.frame <- data.frame(intensity)#
    colnames(predict.frame) <- c("Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    predict.intensity#
}#
#
simple.tc.prep.net <- function(data,spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts.net <- rowSums(spectra.line.table[,-1])#
    total.counts <- data.frame(data$Spectrum, total.counts.net)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    predict.intensity.tc#
}#
simple.comp.prep.net <- function(data, spectra.line.table, element.line, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.ag.fake.Spectrum <- data$Spectrum#
    compton.ag.fake.Compton <- rep(1, length(data$Spectrum))#
    compton.ag.fake <- data.frame(compton.ag.fake.Spectrum,compton.ag.fake.Compton)#
    colnames(compton.ag.fake) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame( intensity/compton.ag.fake$Compton)#
    colnames(predict.frame.comp) <- c("Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    predict.intensity.comp#
}#
###Prep Data#
lucas.simp.prep.net <- function(spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lucas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lucas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lucas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lucas.slope.table) <- c(names(spectra.line.table), "None")#
    lucas.intercept.table <- data.frame(rowSums(lucas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")]))#
    colnames(lucas.intercept.table) <- c("first")#
    lucas.intercept <- lucas.intercept.table$first#
    lucas.slope <- data.frame(lucas.slope.table[,slope.element.lines])#
    colnames(lucas.slope) <- slope.element.lines#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lucas.intercept))-lucas.intercept/(intensity+lucas.intercept)),lucas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lucas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lucas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lucas.slope))#
    predict.intensity.luk#
}#
lucas.tc.prep.net <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts.net <- rowSums(spectra.line.table[,-1])#
    total.counts <- data.frame(data$Spectrum, total.counts.net)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lucas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lucas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lucas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lucas.slope.table) <- c(names(spectra.line.table), "None")#
    lucas.intercept.table.tc <- data.frame(rowSums(lucas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")]))/total.counts$CPS#
    colnames(lucas.intercept.table.tc) <- c("first")#
    lucas.intercept.tc <- lucas.intercept.table.tc$first#
    lucas.slope.tc <- data.frame(lucas.slope.table[,slope.element.lines])/total.counts$CPS#
    colnames(lucas.slope.tc) <- slope.element.lines#
    predict.intensity.luc.tc <- data.frame(((1+intensity/(intensity+lucas.intercept.tc)-lucas.intercept.tc/(intensity+lucas.intercept.tc))),lucas.slope.tc)#
    colnames(predict.intensity.luc.tc) <- c("Intensity", names(lucas.slope.tc))#
    predict.intensity.luc.tc#
}#
lucas.comp.prep.net <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.ag.fake.Spectrum <- data$Spectrum#
    compton.ag.fake.Compton <- rep(1, length(data$Spectrum))#
    compton.ag.fake <- data.frame(compton.ag.fake.Spectrum,compton.ag.fake.Compton)#
    colnames(compton.ag.fake) <- c("Spectrum", "Compton")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lucas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lucas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lucas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lucas.slope.table) <- c(names(spectra.line.table), "None")#
    lucas.intercept.table.comp <- data.frame(rowSums(lucas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")]))/compton.ag.fake$Compton#
    colnames(lucas.intercept.table.comp) <- c("first")#
    lucas.intercept.comp <- lucas.intercept.table.comp$first#
    lucas.slope.comp <- data.frame(lucas.slope.table[,slope.element.lines])/compton.ag.fake$Compton#
    colnames(lucas.slope.comp) <- slope.element.lines#
    predict.frame.luc.comp <- data.frame(((1+predict.frame.comp$Intensity/(predict.frame.comp$Intensity+lucas.intercept.comp)-lucas.intercept.comp/(predict.frame.comp$Intensity+lucas.intercept.comp))),lucas.slope.comp)#
    colnames(predict.frame.luc.comp) <- c("Intensity", names(lucas.slope.comp))#
    predict.intensity.luc.comp <- data.frame(predict.frame.luc.comp$Intensity, lucas.slope.comp)#
    colnames(predict.intensity.luc.comp) <- c("Intensity", names(lucas.slope.comp))#
    predict.intensity.luc.comp#
}#
generatePredictions <- function(quant_file){#
    element.predictions <- element_predictions(count.table=count.table, the.cal=the.cal, elements=elements, variables=variables, valdata=valdata)#
    return(element.predictions)#
}#
#
element_predictions <- function(quant_file){#
    count.table <- quant_file[["Intensities"]]#
    count.table$Spectrum <- quant_file[["Values"]]["Spectrum"][,1]#
    the.cal <- quant_file[["calList"]]#
    elements <- names(quant_file[["calList"]])#
    variables <- ls(quant_file[["Intensities"]])#
    valdata <- quant_file[["Spectra"]]#
    predicted.list <- pblapply(elements, function (x)#
    if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.simp.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        ), cl=6L#
        )#
    }#
    )#
    predicted.vector <- unlist(predicted.list)#
    dim(predicted.vector) <- c(length(count.table$Spectrum), length(elements))#
    predicted.frame <- data.frame(count.table$Spectrum, predicted.vector)#
    colnames(predicted.frame) <- c("Spectrum",  elements)#
    #predicted.data.table <- data.table(predicted.frame)#
    #predicted.values <- t(predicted.values)#
    #predicted.data.table#
    return(predicted.frame)#
}#
element_estimates <- function(quant_file, newdata, spectra){#
    count.table <- newdata#
    count.table$Spectrum <- newdata["Spectrum"]#
    the.cal <- quant_file[["calList"]]#
    elements <- names(quant_file[["calList"]])#
    variables <- ls(quant_file[["Intensities"]])#
    valdata <- spectra#
    predicted.list <- pblapply(elements, function (x)#
    if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.simp.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        ), cl=6L#
        )#
    }#
    )#
    predicted.vector <- unlist(predicted.list)#
    dim(predicted.vector) <- c(length(count.table$Spectrum), length(elements))#
    predicted.frame <- data.frame(count.table$Spectrum, predicted.vector)#
    colnames(predicted.frame) <- c("Spectrum",  elements)#
    #predicted.data.table <- data.table(predicted.frame)#
    #predicted.values <- t(predicted.values)#
    #predicted.data.table#
    return(predicted.frame)#
}#
###900F4352#
F4352ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Manure Val Tests/F4352ManureLightVal.quant")#
F4352ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Manure Val Tests/F4352ManureTraceVal.quant")#
###900F4473#
F4473ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Manure Val Tests/F4473ManureLightVal.quant")#
F4473ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Manure Val Tests/F4473ManureTraceVal.quant")#
###900F4504#
F4504ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Manure Val Tests/F4504ManureLightVal.quant")#
F4504ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Manure Val Tests/F4504ManureTraceVal.quant")#
###900F4166#
F4166ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Manure Val Tests/F4166ManureLightVal.quant")#
F4166ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Manure Val Tests/F4166ManureTraceVal.quant")
###Manure Light#
ManureLightIntensities <- rbind(F4352ManureLight$Intensities, F4473ManureLight$Intensities, F4504ManureLight$Intensities, F4166ManureLight$Intensities)#
ManureLightIntensities$Spectrum <- c(F4352ManureLight[["Values"]]["Spectrum"][,1], F4473ManureLight[["Values"]]["Spectrum"][,1], F4504ManureLight[["Values"]]["Spectrum"][,1], F4166ManureLight[["Values"]]["Spectrum"][,1])#
ManureLightIntensities$.id <- seq(1, length(ManureLightIntensities[,1]), 1)#
#
ManureLightValues <- rbind(F4352ManureLight$Values[61:121,], F4473ManureLight$Values[61:121,], F4504ManureLight$Values[61:121,], F4166ManureLight$Values[61:121,])#
colnames(ManureLightValues) <- gsub("*.K.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.beta", "", colnames(ManureLightValues))#
ManureLightValues$.id <- seq(1, length(ManureLightValues[,1]), 1)
ManureLightCalCurves <- merge(ManureLightIntensities, ManureLightValues, by=".id")#
ManureLightCalCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Intensities[,1])), rep("F4473", length(F4352ManureLight$Intensities[,1])), rep("F4504", length(F4352ManureLight$Intensities[,1])), rep("F4166", length(F4166ManureLight$Intensities[,1])))#
#ManureLightCalCurves[ManureLightCalCurves <= 0.0000] <- NA#
#
ManureLightPredictions <- rbind(element_predictions(F4352ManureLight)[61:121,], element_predictions(F4473ManureLight)[61:121,], element_predictions(F4504ManureLight)[61:121,], element_predictions(F4166ManureLight)[61:121,])#
ManureLightPredictions$.id <- seq(1, length(ManureLightPredictions[,1]), 1)#
ManureLightValCurves <- merge(ManureLightPredictions, ManureLightValues, by=".id")#
ManureLightValCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Values[61:121,1])), rep("F4473", length(F4473ManureLight$Values[61:121,1])), rep("F4504", length(F4504ManureLight$Values[61:121,1])), rep("F4166", length(F4166ManureLight$Values[61:121,1])))#
#ManureLightValCurves[ManureLightValCurves <= 0.0000] <- NA#
#
ManureLight <- list(ManureLightCalCurves, ManureLightValCurves)#
names(ManureLight) <- c("CalCurves", "ValCurves")
ManureLightCalCurves <- merge(ManureLightIntensities, ManureLightValues, by=".id")#
ManureLightCalCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Intensities[61:121,1])), rep("F4473", length(F4352ManureLight$Intensities[61:121,1])), rep("F4504", length(F4352ManureLight$Intensities[61:121,1])), rep("F4166", length(F4166ManureLight$Intensities[61:121,1])))#
#ManureLightCalCurves[ManureLightCalCurves <= 0.0000] <- NA#
#
ManureLightPredictions <- rbind(element_predictions(F4352ManureLight)[61:121,], element_predictions(F4473ManureLight)[61:121,], element_predictions(F4504ManureLight)[61:121,], element_predictions(F4166ManureLight)[61:121,])#
ManureLightPredictions$.id <- seq(1, length(ManureLightPredictions[,1]), 1)
ManureLightValCurves <- merge(ManureLightPredictions, ManureLightValues, by=".id")#
ManureLightValCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Values[61:121,1])), rep("F4473", length(F4473ManureLight$Values[61:121,1])), rep("F4504", length(F4504ManureLight$Values[61:121,1])), rep("F4166", length(F4166ManureLight$Values[61:121,1])))#
#ManureLightValCurves[ManureLightValCurves <= 0.0000] <- NA
ManureLight <- list(ManureLightCalCurves, ManureLightValCurves)#
names(ManureLight) <- c("CalCurves", "ValCurves")
###Manure Light#
ManureLightIntensities <- rbind(F4352ManureLight$Intensities[61:121,], F4473ManureLight$Intensities[61:121,], F4504ManureLight$Intensities[61:121,], F4166ManureLight$Intensities[61:121,])#
ManureLightIntensities$Spectrum <- c(F4352ManureLight[["Values"]]["Spectrum"][,1], F4473ManureLight[["Values"]]["Spectrum"][,1], F4504ManureLight[["Values"]]["Spectrum"][,1], F4166ManureLight[["Values"]]["Spectrum"][,1])#
ManureLightIntensities$.id <- seq(1, length(ManureLightIntensities[,1]), 1)#
#
ManureLightValues <- rbind(F4352ManureLight$Values[61:121,], F4473ManureLight$Values[61:121,], F4504ManureLight$Values[61:121,], F4166ManureLight$Values[61:121,])#
colnames(ManureLightValues) <- gsub("*.K.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.beta", "", colnames(ManureLightValues))#
ManureLightValues$.id <- seq(1, length(ManureLightValues[,1]), 1)#
ManureLightCalCurves <- merge(ManureLightIntensities, ManureLightValues, by=".id")#
ManureLightCalCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Intensities[61:121,1])), rep("F4473", length(F4352ManureLight$Intensities[61:121,1])), rep("F4504", length(F4352ManureLight$Intensities[61:121,1])), rep("F4166", length(F4166ManureLight$Intensities[61:121,1])))#
#ManureLightCalCurves[ManureLightCalCurves <= 0.0000] <- NA#
#
ManureLightPredictions <- rbind(element_predictions(F4352ManureLight)[61:121,], element_predictions(F4473ManureLight)[61:121,], element_predictions(F4504ManureLight)[61:121,], element_predictions(F4166ManureLight)[61:121,])#
ManureLightPredictions$.id <- seq(1, length(ManureLightPredictions[,1]), 1)#
ManureLightValCurves <- merge(ManureLightPredictions, ManureLightValues, by=".id")#
ManureLightValCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Values[61:121,1])), rep("F4473", length(F4473ManureLight$Values[61:121,1])), rep("F4504", length(F4504ManureLight$Values[61:121,1])), rep("F4166", length(F4166ManureLight$Values[61:121,1])))#
#ManureLightValCurves[ManureLightValCurves <= 0.0000] <- NA#
#
ManureLight <- list(ManureLightCalCurves, ManureLightValCurves)#
names(ManureLight) <- c("CalCurves", "ValCurves")#
#
###Manure Trace#
ManureTraceIntensities <- rbind(F4352ManureTrace$Intensities[61:121,], F4473ManureTrace$Intensities[61:121,], F4504ManureTrace$Intensities[61:121,], F4166ManureTrace$Intensities[61:121,])#
ManureTraceIntensities$Spectrum <- c(F4352ManureTrace[["Values"]]["Spectrum"][61:121,1], F4473ManureTrace[["Values"]]["Spectrum"][61:121,1], F4504ManureTrace[["Values"]]["Spectrum"][61:121,1], F4166ManureTrace[["Values"]]["Spectrum"][61:121,1])#
ManureTraceIntensities$.id <- seq(1, length(ManureTraceIntensities[,1]), 1)#
#
ManureTraceValues <- rbind(F4352ManureTrace$Values[61:121,], F4473ManureTrace$Values[61:121,], F4504ManureTrace$Values[61:121,], F4166ManureTrace$Values[61:121,])#
colnames(ManureTraceValues) <- gsub("*.K.alpha", "", colnames(ManureTraceValues))#
colnames(ManureTraceValues) <- gsub("*.L.alpha", "", colnames(ManureTraceValues))#
colnames(ManureTraceValues) <- gsub("*.L.beta", "", colnames(ManureTraceValues))#
ManureTraceValues$.id <- seq(1, length(ManureTraceValues[,1]), 1)#
ManureTraceCalCurves <- merge(ManureTraceIntensities, ManureTraceValues, by=".id")#
ManureTraceCalCurves$Instrument <- c(rep("F4352", length(F4352ManureTrace$Intensities[61:121,1])), rep("F4473", length(F4473ManureTrace$Intensities[61:121,1])), rep("F4504", length(F4504ManureTrace$Intensities[61:121,1])), rep("F4166", length(F4166ManureTrace$Intensities[61:121,1])))#
#ManureTraceCalCurves[ManureTraceCalCurves <= 0.0000] <- NA#
#
ManureTracePredictions <- rbind(element_predictions(F4352ManureTrace)[61:121,], element_predictions(F4473ManureTrace)[61:121,], element_predictions(F4504ManureTrace)[61:121,], element_predictions(F4166ManureTrace)[61:121,])#
ManureTracePredictions$.id <- seq(1, length(ManureTracePredictions[,1]), 1)#
ManureTraceValCurves <- merge(ManureTracePredictions, ManureTraceValues, by=".id")#
ManureTraceValCurves$Instrument <- c(rep("F4352", length(F4352ManureTrace$Values[61:121,1])), rep("F4473", length(F4352ManureTrace$Values[61:121,1])), rep("F4504", length(F4352ManureTrace$Values[61:121,1])), rep("F4166", length(F4166ManureTrace$Values[61:121,1])))#
#ManureTraceValCurves[ManureTraceValCurves <= 0.0000] <- NA#
#
ManureTrace <- list(ManureTraceCalCurves, ManureTraceValCurves)#
names(ManureTrace) <- c("CalCurves", "ValCurves")
Mg.frame <- ManureLight[["ValCurves"]]#
Mg.frame$Use <- c(F4352ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]], F4473ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]], F4504ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]], F4166ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]])#
Mg.frame <- Mg.frame[!is.na(Mg.frame$Use),]#
Mg.frame <- Mg.frame[Mg.frame$Use,]#
Mg.frame[Mg.frame <= 0.0000] <- NA#
Mg.frame <- Mg.frame[!is.na(Mg.frame$Mg),]#
#
Mg.plot <- ggplot(Mg.frame, aes(Mg.K.alpha*10000, Mg*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Magnesium ppm XRF",  labels = comma) +#
scale_y_continuous("Magnesium ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()
Mg.frame <- ManureLight[["ValCurves"]]#
Mg.frame$Use <- c(F4352ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Mg.frame <- Mg.frame[!is.na(Mg.frame$Use),]#
Mg.frame <- Mg.frame[Mg.frame$Use,]#
Mg.frame[Mg.frame <= 0.0000] <- NA#
Mg.frame <- Mg.frame[!is.na(Mg.frame$Mg),]
Mg.plot <- ggplot(Mg.frame, aes(Mg.K.alpha*10000, Mg*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Magnesium ppm XRF",  labels = comma) +#
scale_y_continuous("Magnesium ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()
Mg.plot
head(Mg.frame)
F4352ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121]
head(ManureLight[["ValCurves"]])
ManureLight[["ValCurves"]]$Mg
###Manure Light#
ManureLightIntensities <- rbind(F4352ManureLight$Intensities[61:121,], F4473ManureLight$Intensities[61:121,], F4504ManureLight$Intensities[61:121,], F4166ManureLight$Intensities[61:121,])#
ManureLightIntensities$Spectrum <- c(F4352ManureLight[["Values"]]["Spectrum"][,1], F4473ManureLight[["Values"]]["Spectrum"][,1], F4504ManureLight[["Values"]]["Spectrum"][,1], F4166ManureLight[["Values"]]["Spectrum"][,1])#
ManureLightIntensities$.id <- seq(1, length(ManureLightIntensities[,1]), 1)
ManureLightIntensities <- rbind(F4352ManureLight$Intensities[61:121,], F4473ManureLight$Intensities[61:121,], F4504ManureLight$Intensities[61:121,], F4166ManureLight$Intensities[61:121,])#
ManureLightIntensities$Spectrum <- c(F4352ManureLight[["Values"]]["Spectrum"][61:121,1], F4473ManureLight[["Values"]]["Spectrum"][61:121,1], F4504ManureLight[["Values"]]["Spectrum"][61:121,1], F4166ManureLight[["Values"]]["Spectrum"][61:121,1])#
ManureLightIntensities$.id <- seq(1, length(ManureLightIntensities[,1]), 1)
###Manure Light#
ManureLightIntensities <- rbind(F4352ManureLight$Intensities[61:121,], F4473ManureLight$Intensities[61:121,], F4504ManureLight$Intensities[61:121,], F4166ManureLight$Intensities[61:121,])#
ManureLightIntensities$Spectrum <- c(F4352ManureLight[["Values"]]["Spectrum"][61:121,1], F4473ManureLight[["Values"]]["Spectrum"][61:121,1], F4504ManureLight[["Values"]]["Spectrum"][61:121,1], F4166ManureLight[["Values"]]["Spectrum"][61:121,1])#
ManureLightIntensities$.id <- seq(1, length(ManureLightIntensities[,1]), 1)#
#
ManureLightValues <- rbind(F4352ManureLight$Values[61:121,], F4473ManureLight$Values[61:121,], F4504ManureLight$Values[61:121,], F4166ManureLight$Values[61:121,])#
colnames(ManureLightValues) <- gsub("*.K.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.beta", "", colnames(ManureLightValues))#
ManureLightValues$.id <- seq(1, length(ManureLightValues[,1]), 1)#
ManureLightCalCurves <- merge(ManureLightIntensities, ManureLightValues, by=".id")#
ManureLightCalCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Intensities[61:121,1])), rep("F4473", length(F4352ManureLight$Intensities[61:121,1])), rep("F4504", length(F4352ManureLight$Intensities[61:121,1])), rep("F4166", length(F4166ManureLight$Intensities[61:121,1])))#
#ManureLightCalCurves[ManureLightCalCurves <= 0.0000] <- NA#
#
ManureLightPredictions <- rbind(element_predictions(F4352ManureLight)[61:121,], element_predictions(F4473ManureLight)[61:121,], element_predictions(F4504ManureLight)[61:121,], element_predictions(F4166ManureLight)[61:121,])#
ManureLightPredictions$.id <- seq(1, length(ManureLightPredictions[,1]), 1)#
ManureLightValCurves <- merge(ManureLightPredictions, ManureLightValues, by=".id")#
ManureLightValCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Values[61:121,1])), rep("F4473", length(F4473ManureLight$Values[61:121,1])), rep("F4504", length(F4504ManureLight$Values[61:121,1])), rep("F4166", length(F4166ManureLight$Values[61:121,1])))#
#ManureLightValCurves[ManureLightValCurves <= 0.0000] <- NA#
#
ManureLight <- list(ManureLightCalCurves, ManureLightValCurves)#
names(ManureLight) <- c("CalCurves", "ValCurves")#
#
###Manure Trace#
ManureTraceIntensities <- rbind(F4352ManureTrace$Intensities[61:121,], F4473ManureTrace$Intensities[61:121,], F4504ManureTrace$Intensities[61:121,], F4166ManureTrace$Intensities[61:121,])#
ManureTraceIntensities$Spectrum <- c(F4352ManureTrace[["Values"]]["Spectrum"][61:121,1], F4473ManureTrace[["Values"]]["Spectrum"][61:121,1], F4504ManureTrace[["Values"]]["Spectrum"][61:121,1], F4166ManureTrace[["Values"]]["Spectrum"][61:121,1])#
ManureTraceIntensities$.id <- seq(1, length(ManureTraceIntensities[,1]), 1)#
#
ManureTraceValues <- rbind(F4352ManureTrace$Values[61:121,], F4473ManureTrace$Values[61:121,], F4504ManureTrace$Values[61:121,], F4166ManureTrace$Values[61:121,])#
colnames(ManureTraceValues) <- gsub("*.K.alpha", "", colnames(ManureTraceValues))#
colnames(ManureTraceValues) <- gsub("*.L.alpha", "", colnames(ManureTraceValues))#
colnames(ManureTraceValues) <- gsub("*.L.beta", "", colnames(ManureTraceValues))#
ManureTraceValues$.id <- seq(1, length(ManureTraceValues[,1]), 1)#
ManureTraceCalCurves <- merge(ManureTraceIntensities, ManureTraceValues, by=".id")#
ManureTraceCalCurves$Instrument <- c(rep("F4352", length(F4352ManureTrace$Intensities[61:121,1])), rep("F4473", length(F4473ManureTrace$Intensities[61:121,1])), rep("F4504", length(F4504ManureTrace$Intensities[61:121,1])), rep("F4166", length(F4166ManureTrace$Intensities[61:121,1])))#
#ManureTraceCalCurves[ManureTraceCalCurves <= 0.0000] <- NA#
#
ManureTracePredictions <- rbind(element_predictions(F4352ManureTrace)[61:121,], element_predictions(F4473ManureTrace)[61:121,], element_predictions(F4504ManureTrace)[61:121,], element_predictions(F4166ManureTrace)[61:121,])#
ManureTracePredictions$.id <- seq(1, length(ManureTracePredictions[,1]), 1)#
ManureTraceValCurves <- merge(ManureTracePredictions, ManureTraceValues, by=".id")#
ManureTraceValCurves$Instrument <- c(rep("F4352", length(F4352ManureTrace$Values[61:121,1])), rep("F4473", length(F4352ManureTrace$Values[61:121,1])), rep("F4504", length(F4352ManureTrace$Values[61:121,1])), rep("F4166", length(F4166ManureTrace$Values[61:121,1])))#
#ManureTraceValCurves[ManureTraceValCurves <= 0.0000] <- NA#
#
ManureTrace <- list(ManureTraceCalCurves, ManureTraceValCurves)#
names(ManureTrace) <- c("CalCurves", "ValCurves")
head(ManureLight[["ValCurves"]])
###Manure Light#
ManureLightIntensities <- rbind(F4352ManureLight$Intensities[61:121,], F4473ManureLight$Intensities[61:121,], F4504ManureLight$Intensities[61:121,], F4166ManureLight$Intensities[61:121,])#
ManureLightIntensities$Spectrum <- c(F4352ManureLight[["Values"]]["Spectrum"][61:121,1], F4473ManureLight[["Values"]]["Spectrum"][61:121,1], F4504ManureLight[["Values"]]["Spectrum"][61:121,1], F4166ManureLight[["Values"]]["Spectrum"][61:121,1])#
ManureLightIntensities$.id <- seq(1, length(ManureLightIntensities[,1]), 1)
head(ManureLightIntensities)
ManureLightValues <- rbind(F4352ManureLight$Values[61:121,], F4473ManureLight$Values[61:121,], F4504ManureLight$Values[61:121,], F4166ManureLight$Values[61:121,])#
colnames(ManureLightValues) <- gsub("*.K.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.beta", "", colnames(ManureLightValues))#
ManureLightValues$.id <- seq(1, length(ManureLightValues[61:121,1]), 1)
ManureLightCalCurves <- merge(ManureLightIntensities, ManureLightValues, by=".id")
ManureLightCalCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Intensities[61:121,1])), rep("F4473", length(F4352ManureLight$Intensities[61:121,1])), rep("F4504", length(F4352ManureLight$Intensities[61:121,1])), rep("F4166", length(F4166ManureLight$Intensities[61:121,1])))#
#ManureLightCalCurves[ManureLightCalCurves <= 0.0000] <- NA#
#
ManureLightPredictions <- rbind(element_predictions(F4352ManureLight)[61:121,], element_predictions(F4473ManureLight)[61:121,], element_predictions(F4504ManureLight)[61:121,], element_predictions(F4166ManureLight)[61:121,])
head(ManureLightPredictions)
ManureLightPredictions$.id <- seq(1, length(ManureLightPredictions[,1]), 1)
ManureLightValCurves <- merge(ManureLightPredictions, ManureLightValues, by=".id")#
ManureLightValCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Values[61:121,1])), rep("F4473", length(F4473ManureLight$Values[61:121,1])), rep("F4504", length(F4504ManureLight$Values[61:121,1])), rep("F4166", length(F4166ManureLight$Values[61:121,1])))#
#ManureLightValCurves[ManureLightValCurves <= 0.0000] <- NA#
#
ManureLight <- list(ManureLightCalCurves, ManureLightValCurves)#
names(ManureLight) <- c("CalCurves", "ValCurves")
head(ManureLight[["ValCurves"]])
ManureLightValCurves <- merge(ManureLightPredictions, ManureLightValues, by=".id")
head(ManureLightValCurves)
head(ManureLightPredictions)
head(ManureLightValues)
ls(F4352ManureLight)
###900F4352#
F4352ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureLight.quant")#
F4352ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureTrace.quant")#
###900F4473#
F4473ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473ManureLight.quant")#
F4473ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473ManureTrace.quant")#
###900F4504#
F4504ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504ManureLight.quant")#
F4504ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504ManureTrace.quant")#
###900F4166#
F4166ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Rothamstead 5i 900F4166/R Cals/900F4166ManureLight.quant")#
F4166ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Rothamstead 5i 900F4166/R Cals/900F4166ManureTrace.quant")#
###900F4352#
F4352ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Manure Val Tests/F4352ManureLightVal.quant")#
F4352ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Manure Val Tests/F4352ManureTraceVal.quant")#
###900F4473#
F4473ManureLightPred <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Manure Val Tests/F4473ManureLightVal.quant")#
F4473ManureTracePred <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Manure Val Tests/F4473ManureTraceVal.quant")#
###900F4504#
F4504ManureLightPred <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Manure Val Tests/F4504ManureLightVal.quant")#
F4504ManureTracePred <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Manure Val Tests/F4504ManureTraceVal.quant")#
###900F4166#
F4166ManureLightPred <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Manure Val Tests/F4166ManureLightVal.quant")#
F4166ManureTracePred <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Manure Val Tests/F4166ManureTraceVal.quant")
###Manure Light#
ManureLightIntensities <- rbind(F4352ManureLight$Intensities[61:121,], F4473ManureLight$Intensities[61:121,], F4504ManureLight$Intensities[61:121,], F4166ManureLight$Intensities[61:121,])#
ManureLightIntensities$Spectrum <- c(F4352ManureLight[["Values"]]["Spectrum"][61:121,1], F4473ManureLight[["Values"]]["Spectrum"][61:121,1], F4504ManureLight[["Values"]]["Spectrum"][61:121,1], F4166ManureLight[["Values"]]["Spectrum"][61:121,1])#
ManureLightIntensities$.id <- seq(1, length(ManureLightIntensities[,1]), 1)#
#
ManureLightValues <- rbind(F4352ManureLight$Values[61:121,], F4473ManureLight$Values[61:121,], F4504ManureLight$Values[61:121,], F4166ManureLight$Values[61:121,])#
colnames(ManureLightValues) <- gsub("*.K.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.beta", "", colnames(ManureLightValues))#
ManureLightValues$.id <- seq(1, length(ManureLightValues[61:121,1]), 1)#
ManureLightCalCurves <- merge(ManureLightIntensities, ManureLightValues, by=".id")#
ManureLightCalCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Intensities[61:121,1])), rep("F4473", length(F4352ManureLight$Intensities[61:121,1])), rep("F4504", length(F4352ManureLight$Intensities[61:121,1])), rep("F4166", length(F4166ManureLight$Intensities[61:121,1])))#
#ManureLightCalCurves[ManureLightCalCurves <= 0.0000] <- NA
ManureLightPredictions <- rbind(element_estimates(quant_file=F4352ManureLightPred, newdata=F4352ManureLight[["Intensities"]], spectra=F4352ManureLight[["Spectra"]])[61:121,], element_estimates(quant_file=F4473ManureLightPred, newdata=F4473ManureLight[["Intensities"]], spectra=F4437ManureLight[["Spectra"]])[61:121,], element_estimates(quant_file=F4504ManureLightPred, newdata=F4504ManureLight[["Intensities"]], spectra=F4504ManureLight[["Spectra"]])[61:121,], element_estimates(F4504ManureLight)[61:121,])
head(F4352ManureLight[["Intensities"]])
head(F4352ManureLight[["Spectra"]])
element_estimates <- function(quant_file, newdata, spectra){#
    count.table <- newdata#
    count.table$Spectrum <- spectra["Spectrum"]#
    the.cal <- quant_file[["calList"]]#
    elements <- names(quant_file[["calList"]])#
    variables <- ls(quant_file[["Intensities"]])#
    valdata <- spectra#
    predicted.list <- pblapply(elements, function (x)#
    if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.simp.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        ), cl=6L#
        )#
    }#
    )#
    predicted.vector <- unlist(predicted.list)#
    dim(predicted.vector) <- c(length(count.table$Spectrum), length(elements))#
    predicted.frame <- data.frame(count.table$Spectrum, predicted.vector)#
    colnames(predicted.frame) <- c("Spectrum",  elements)#
    #predicted.data.table <- data.table(predicted.frame)#
    #predicted.values <- t(predicted.values)#
    #predicted.data.table#
    return(predicted.frame)#
}
ManureLightPredictions <- rbind(element_estimates(quant_file=F4352ManureLightPred, newdata=F4352ManureLight[["Intensities"]], spectra=F4352ManureLight[["Spectra"]])[61:121,], element_estimates(quant_file=F4473ManureLightPred, newdata=F4473ManureLight[["Intensities"]], spectra=F4437ManureLight[["Spectra"]])[61:121,], element_estimates(quant_file=F4504ManureLightPred, newdata=F4504ManureLight[["Intensities"]], spectra=F4504ManureLight[["Spectra"]])[61:121,], element_estimates(F4504ManureLight)[61:121,])
warnings()
errors()
element_estimates <- function(quant_file, newdata, spectra){#
    count.table <- newdata#
    count.table$Spectrum <- unique(spectra["Spectrum"])#
    the.cal <- quant_file[["calList"]]#
    elements <- names(quant_file[["calList"]])#
    variables <- ls(quant_file[["Intensities"]])#
    valdata <- spectra#
    predicted.list <- pblapply(elements, function (x)#
    if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.simp.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        ), cl=6L#
        )#
    }#
    )#
    predicted.vector <- unlist(predicted.list)#
    dim(predicted.vector) <- c(length(count.table$Spectrum), length(elements))#
    predicted.frame <- data.frame(count.table$Spectrum, predicted.vector)#
    colnames(predicted.frame) <- c("Spectrum",  elements)#
    #predicted.data.table <- data.table(predicted.frame)#
    #predicted.values <- t(predicted.values)#
    #predicted.data.table#
    return(predicted.frame)#
}
ManureLightPredictions <- rbind(element_estimates(quant_file=F4352ManureLightPred, newdata=F4352ManureLight[["Intensities"]], spectra=F4352ManureLight[["Spectra"]])[61:121,], element_estimates(quant_file=F4473ManureLightPred, newdata=F4473ManureLight[["Intensities"]], spectra=F4437ManureLight[["Spectra"]])[61:121,], element_estimates(quant_file=F4504ManureLightPred, newdata=F4504ManureLight[["Intensities"]], spectra=F4504ManureLight[["Spectra"]])[61:121,], element_estimates(F4504ManureLight)[61:121,])
###900F4352#
F4352ManureLightPred <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Manure Val Tests/F4352ManureLightVal.quant")#
F4352ManureTracePred <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Manure Val Tests/F4352ManureTraceVal.quant")
###900F4352#
F4352ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureLight.quant")#
F4352ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureTrace.quant")
ManureLightPredictions <- rbind(element_estimates(quant_file=F4352ManureLightPred, newdata=F4352ManureLight[["Intensities"]], spectra=F4352ManureLight[["Spectra"]])[61:121,], element_estimates(quant_file=F4473ManureLightPred, newdata=F4473ManureLight[["Intensities"]], spectra=F4437ManureLight[["Spectra"]])[61:121,], element_estimates(quant_file=F4504ManureLightPred, newdata=F4504ManureLight[["Intensities"]], spectra=F4504ManureLight[["Spectra"]])[61:121,], element_estimates(F4504ManureLight)[61:121,])
test <- element_estimates(quant_file=F4352ManureLightPred, newdata=F4352ManureLight[["Intensities"]], spectra=F4352ManureLight[["Spectra"]])
head(test)
quant_file=F4352ManureLightPred
newdata=F4352ManureLight[["Intensities"]]
spectra=F4352ManureLight[["Spectra"]]
count.table <- newdata#
    count.table$Spectrum <- unique(spectra["Spectrum"])#
    the.cal <- quant_file[["calList"]]#
    elements <- names(quant_file[["calList"]])#
    variables <- ls(quant_file[["Intensities"]])#
    valdata <- spectra
predicted.list <- pblapply(elements, function (x)#
    if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.simp.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        ), cl=6L#
        )#
    }#
    )
length(predicted.list)
predicted.vector <- unlist(predicted.list)
lengthIpredicted.vector
length(predicted.vector)
length(predicted.vector)/elements
length(predicted.vector)/length(elements)
length(count.table$Spectrum)
head(count.table$Spectrum)
tail(count.table$Spectrum)
length(as.vector(count.table$Spectrum))
count.table$Spectrum
count.table$Spectrum[,1]
element_estimates <- function(quant_file, newdata, spectra){#
    count.table <- newdata#
    count.table$Spectrum <- unique(spectra["Spectrum"])#
    the.cal <- quant_file[["calList"]]#
    elements <- names(quant_file[["calList"]])#
    variables <- ls(quant_file[["Intensities"]])#
    valdata <- spectra#
    predicted.list <- pblapply(elements, function (x)#
    if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.simp.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lucas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        ), cl=6L#
        )#
    }#
    )#
    predicted.vector <- unlist(predicted.list)#
    dim(predicted.vector) <- c(length(count.table$Spectrum[,1]), length(elements))#
    predicted.frame <- data.frame(count.table$Spectrum, predicted.vector)#
    colnames(predicted.frame) <- c("Spectrum",  elements)#
    #predicted.data.table <- data.table(predicted.frame)#
    #predicted.values <- t(predicted.values)#
    #predicted.data.table#
    return(predicted.frame)#
}
ManureLightPredictions <- rbind(element_estimates(quant_file=F4352ManureLightPred, newdata=F4352ManureLight[["Intensities"]], spectra=F4352ManureLight[["Spectra"]])[61:121,], element_estimates(quant_file=F4473ManureLightPred, newdata=F4473ManureLight[["Intensities"]], spectra=F4437ManureLight[["Spectra"]])[61:121,], element_estimates(quant_file=F4504ManureLightPred, newdata=F4504ManureLight[["Intensities"]], spectra=F4504ManureLight[["Spectra"]])[61:121,], element_estimates(F4504ManureLight)[61:121,])
ManureLightPredictions <- rbind(element_estimates(quant_file=F4352ManureLightPred, newdata=F4352ManureLight[["Intensities"]], spectra=F4352ManureLight[["Spectra"]])[61:121,], element_estimates(quant_file=F4473ManureLightPred, newdata=F4473ManureLight[["Intensities"]], spectra=F4473ManureLight[["Spectra"]])[61:121,], element_estimates(quant_file=F4504ManureLightPred, newdata=F4504ManureLight[["Intensities"]], spectra=F4504ManureLight[["Spectra"]])[61:121,], element_estimates(F4504ManureLight)[61:121,])
ManureLightPredictions <- rbind(element_estimates(quant_file=F4352ManureLightPred, newdata=F4352ManureLight[["Intensities"]], spectra=F4352ManureLight[["Spectra"]])[61:121,], element_estimates(quant_file=F4473ManureLightPred, newdata=F4473ManureLight[["Intensities"]], spectra=F4473ManureLight[["Spectra"]])[61:121,], element_estimates(quant_file=F4504ManureLightPred, newdata=F4504ManureLight[["Intensities"]], spectra=F4504ManureLight[["Spectra"]])[61:121,], element_estimates(quant_file=F4166ManureLightPred, newdata=F4166ManureLight[["Intensities"]], spectra=F4166ManureLight[["Spectra"]])[61:121,])
v
ManureLightPredictions$.id <- seq(1, length(ManureLightPredictions[,1]), 1)
###Manure Light#
ManureLightIntensities <- rbind(F4352ManureLight$Intensities[61:121,], F4473ManureLight$Intensities[61:121,], F4504ManureLight$Intensities[61:121,], F4166ManureLight$Intensities[61:121,])#
ManureLightIntensities$Spectrum <- c(F4352ManureLight[["Values"]]["Spectrum"][61:121,1], F4473ManureLight[["Values"]]["Spectrum"][61:121,1], F4504ManureLight[["Values"]]["Spectrum"][61:121,1], F4166ManureLight[["Values"]]["Spectrum"][61:121,1])#
ManureLightIntensities$.id <- seq(1, length(ManureLightIntensities[,1]), 1)#
#
ManureLightValues <- rbind(F4352ManureLight$Values[61:121,], F4473ManureLight$Values[61:121,], F4504ManureLight$Values[61:121,], F4166ManureLight$Values[61:121,])#
colnames(ManureLightValues) <- gsub("*.K.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.beta", "", colnames(ManureLightValues))#
ManureLightValues$.id <- seq(1, length(ManureLightValues[61:121,1]), 1)#
ManureLightCalCurves <- merge(ManureLightIntensities, ManureLightValues, by=".id")#
ManureLightCalCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Intensities[61:121,1])), rep("F4473", length(F4352ManureLight$Intensities[61:121,1])), rep("F4504", length(F4352ManureLight$Intensities[61:121,1])), rep("F4166", length(F4166ManureLight$Intensities[61:121,1])))#
#ManureLightCalCurves[ManureLightCalCurves <= 0.0000] <- NA#
#
ManureLightPredictions <- rbind(element_estimates(quant_file=F4352ManureLightPred, newdata=F4352ManureLight[["Intensities"]], spectra=F4352ManureLight[["Spectra"]])[61:121,], element_estimates(quant_file=F4473ManureLightPred, newdata=F4473ManureLight[["Intensities"]], spectra=F4473ManureLight[["Spectra"]])[61:121,], element_estimates(quant_file=F4504ManureLightPred, newdata=F4504ManureLight[["Intensities"]], spectra=F4504ManureLight[["Spectra"]])[61:121,], element_estimates(quant_file=F4166ManureLightPred, newdata=F4166ManureLight[["Intensities"]], spectra=F4166ManureLight[["Spectra"]])[61:121,])#
ManureLightPredictions$.id <- seq(1, length(ManureLightPredictions[,1]), 1)#
ManureLightValCurves <- merge(ManureLightPredictions, ManureLightValues, by=".id")#
ManureLightValCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Values[61:121,1])), rep("F4473", length(F4473ManureLight$Values[61:121,1])), rep("F4504", length(F4504ManureLight$Values[61:121,1])), rep("F4166", length(F4166ManureLight$Values[61:121,1])))#
#ManureLightValCurves[ManureLightValCurves <= 0.0000] <- NA#
#
ManureLight <- list(ManureLightCalCurves, ManureLightValCurves)#
names(ManureLight) <- c("CalCurves", "ValCurves")#
#
###Manure Trace#
ManureTraceIntensities <- rbind(F4352ManureTrace$Intensities[61:121,], F4473ManureTrace$Intensities[61:121,], F4504ManureTrace$Intensities[61:121,], F4166ManureTrace$Intensities[61:121,])#
ManureTraceIntensities$Spectrum <- c(F4352ManureTrace[["Values"]]["Spectrum"][61:121,1], F4473ManureTrace[["Values"]]["Spectrum"][61:121,1], F4504ManureTrace[["Values"]]["Spectrum"][61:121,1], F4166ManureTrace[["Values"]]["Spectrum"][61:121,1])#
ManureTraceIntensities$.id <- seq(1, length(ManureTraceIntensities[61:121,1]), 1)#
#
ManureTraceValues <- rbind(F4352ManureTrace$Values[61:121,], F4473ManureTrace$Values[61:121,], F4504ManureTrace$Values[61:121,], F4166ManureTrace$Values[61:121,])#
colnames(ManureTraceValues) <- gsub("*.K.alpha", "", colnames(ManureTraceValues))#
colnames(ManureTraceValues) <- gsub("*.L.alpha", "", colnames(ManureTraceValues))#
colnames(ManureTraceValues) <- gsub("*.L.beta", "", colnames(ManureTraceValues))#
ManureTraceValues$.id <- seq(1, length(ManureTraceValues[,1]), 1)#
ManureTraceCalCurves <- merge(ManureTraceIntensities, ManureTraceValues, by=".id")#
ManureTraceCalCurves$Instrument <- c(rep("F4352", length(F4352ManureTrace$Intensities[61:121,1])), rep("F4473", length(F4473ManureTrace$Intensities[61:121,1])), rep("F4504", length(F4504ManureTrace$Intensities[61:121,1])), rep("F4166", length(F4166ManureTrace$Intensities[61:121,1])))#
#ManureTraceCalCurves[ManureTraceCalCurves <= 0.0000] <- NA#
#
ManureLightPredictions <- rbind(element_estimates(quant_file=F4352ManureTracePred, newdata=F4352ManureTrace[["Intensities"]], spectra=F4352ManureTrace[["Spectra"]])[61:121,], element_estimates(quant_file=F4473ManureTracePred, newdata=F4473ManureTrace[["Intensities"]], spectra=F4473ManureTrace[["Spectra"]])[61:121,], element_estimates(quant_file=F4504ManureTracePred, newdata=F4504ManureTrace[["Intensities"]], spectra=F4504ManureTrace[["Spectra"]])[61:121,], element_estimates(quant_file=F4166ManureTracePred, newdata=F4166ManureTrace[["Intensities"]], spectra=F4166ManureTrace[["Spectra"]])[61:121,])#
ManureTracePredictions$.id <- seq(1, length(ManureTracePredictions[,1]), 1)#
ManureTraceValCurves <- merge(ManureTracePredictions, ManureTraceValues, by=".id")#
ManureTraceValCurves$Instrument <- c(rep("F4352", length(F4352ManureTrace$Values[61:121,1])), rep("F4473", length(F4352ManureTrace$Values[61:121,1])), rep("F4504", length(F4352ManureTrace$Values[61:121,1])), rep("F4166", length(F4166ManureTrace$Values[61:121,1])))#
#ManureTraceValCurves[ManureTraceValCurves <= 0.0000] <- NA#
#
ManureTrace <- list(ManureTraceCalCurves, ManureTraceValCurves)#
names(ManureTrace) <- c("CalCurves", "ValCurves")
Mg.frame <- ManureLight[["ValCurves"]]#
Mg.frame$Use <- c(F4352ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Mg.frame <- Mg.frame[!is.na(Mg.frame$Use),]#
Mg.frame <- Mg.frame[Mg.frame$Use,]#
Mg.frame[Mg.frame <= 0.0000] <- NA#
Mg.frame <- Mg.frame[!is.na(Mg.frame$Mg),]#
#
Mg.plot <- ggplot(Mg.frame, aes(Mg.K.alpha*10000, Mg*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Magnesium ppm XRF",  labels = comma) +#
scale_y_continuous("Magnesium ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()
Mg.plot
P.frame <- ManureLight[["ValCurves"]]#
P.frame$Use <- c(F4352ManureLight[["calList"]][["P.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureLight[["calList"]][["P.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureLight[["calList"]][["P.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureLight[["calList"]][["P.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
P.frame <- P.frame[!is.na(P.frame$Use),]#
P.frame <- P.frame[P.frame$Use,]#
P.frame[P.frame <= 0.0000] <- NA#
P.frame <- P.frame[!is.na(P.frame$P),]#
#
P.plot <- ggplot(P.frame, aes(P.K.alpha*10000, P*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Phosphorous ppm XRF",  labels = comma) +#
scale_y_continuous("Phosphorous ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()
P.plot
P.plot
Cr.frame <- ManureTrace[["ValCurves"]]#
Cr.frame$Use <- c(F4352ManureTrace[["calList"]][["Cr.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureTrace[["calList"]][["Cr.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureTrace[["calList"]][["Cr.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureTrace[["calList"]][["Cr.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Cr.frame <- Cr.frame[!is.na(Cr.frame$Use),]#
Cr.frame <- Cr.frame[Cr.frame$Use,]#
Cr.frame[Cr.frame <= 0.0000] <- NA#
Cr.frame <- Cr.frame[!is.na(Cr.frame$Cr),]#
#
Cr.plot <- ggplot(Cr.frame, aes(Cr.K.alpha*10000, Cr*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Chromium ppm XRF",  labels = comma) +#
scale_y_continuous("Chromium ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()
Cr.plot
Na.frame <- ManureLight[["ValCurves"]]#
Na.frame$Use <- c(F4352ManureLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Na.frame <- Na.frame[!is.na(Na.frame$Use),]#
Na.frame <- Na.frame[Na.frame$Use,]#
Na.frame[Na.frame <= 0.0000] <- NA#
Na.frame <- Na.frame[!is.na(Na.frame$Na),]#
Na.plot <- ggplot(Na.frame, aes(Na.K.alpha*10000, Na*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Sodium ppm XRF",  labels = comma) +#
scale_y_continuous("Sodium ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()
min(F4352ManureTracePred[["Values"]][["Mg.K.alpha"]])
head(F4352ManureTracePred[["Values"]][["Mg.K.alpha"]])
ls(F4352ManureTracePred)
head(F4352ManureTracePred[["Values"]])
min(F4352ManureLightPred[["Values"]][["Na.K.alpha"]])
head(F4352ManureLightPred[["Values"]][["Na.K.alpha"]])
min(F4352ManureLightPred[["Values"]][["Na.K.alpha"]])
mean(F4352ManureLightPred[["Values"]][["Na.K.alpha"]])
mean(F4352ManureLightPred[["Values"]][["Na.K.alpha"]][is.numeric,])
?min
min(F4352ManureLightPred[["Values"]][["Na.K.alpha"]], na.rm = FALSE
)
min(F4352ManureLightPred[["Values"]][["Na.K.alpha"]], na.rm = TRUE)
max(F4352ManureLightPred[["Values"]][["Na.K.alpha"]], na.rm = TRUE)
Na.frame <- ManureLight[["ValCurves"]]#
Na.frame$Use <- c(F4352ManureLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Na.frame <- Na.frame[!is.na(Na.frame$Use),]#
Na.frame <- Na.frame[Na.frame$Use,]#
Na.frame[Na.frame <= 0.0000] <- NA#
Na.frame <- Na.frame[!is.na(Na.frame$Na),]#
Na.frame[Na.frame$Na>min(F4352ManureLightPred[["Values"]][["Na.K.alpha"]], na.rm = TRUE) & Na.frame$Na<max(F4352ManureLightPred[["Values"]][["Na.K.alpha"]], na.rm = TRUE), ]
Na.frame <- Na.frame[Na.frame$Na>min(F4352ManureLightPred[["Values"]][["Na.K.alpha"]], na.rm = TRUE) & Na.frame$Na<max(F4352ManureLightPred[["Values"]][["Na.K.alpha"]], na.rm = TRUE), ]
Mg.frame <- ManureLight[["ValCurves"]]#
Mg.frame$Use <- c(F4352ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Mg.frame <- Mg.frame[!is.na(Mg.frame$Use),]#
Mg.frame <- Mg.frame[Mg.frame$Use,]#
Mg.frame[Mg.frame <= 0.0000] <- NA#
Mg.frame <- Mg.frame[!is.na(Mg.frame$Mg),]#
Mg.frame <- Mg.frame[Mg.frame$Mg>min(F4352ManureLightPred[["Values"]][["Mg.K.alpha"]], na.rm = TRUE) & Mg.frame$Mg<max(F4352ManureLightPred[["Values"]][["Mg.K.alpha"]], na.rm = TRUE), ]#
#
Mg.plot <- ggplot(Mg.frame, aes(Mg.K.alpha*10000, Mg*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Magnesium ppm XRF",  labels = comma) +#
scale_y_continuous("Magnesium ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()
Mg.plot
Mg.frame <- ManureLight[["ValCurves"]]#
Mg.frame$Use <- c(F4352ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Mg.frame <- Mg.frame[!is.na(Mg.frame$Use),]#
Mg.frame <- Mg.frame[Mg.frame$Use,]#
Mg.frame[Mg.frame <= 0.0000] <- NA#
Mg.frame <- Mg.frame[!is.na(Mg.frame$Mg),]
length(Mg.frame[,1])
Mg.frame <- Mg.frame[Mg.frame$Mg>min(F4352ManureLightPred[["Values"]][["Mg.K.alpha"]], na.rm = TRUE) & Mg.frame$Mg<max(F4352ManureLightPred[["Values"]][["Mg.K.alpha"]], na.rm = TRUE), ]
length(Mg.frame[,1])
min(F4352ManureLightPred[["Values"]][["Mg.K.alpha"]], na.rm = TRUE)
Mg.frame$Mg<max(F4352ManureLightPred[["Values"]][["Mg.K.alpha"]], na.rm = TRUE)
max(F4352ManureLightPred[["Values"]][["Mg.K.alpha"]], na.rm = TRUE)
Mg.plot
max(Mg.frame$Mg)
Cr.frame <- ManureTrace[["ValCurves"]]#
Cr.frame$Use <- c(F4352ManureTrace[["calList"]][["Cr.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureTrace[["calList"]][["Cr.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureTrace[["calList"]][["Cr.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureTrace[["calList"]][["Cr.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Cr.frame <- Cr.frame[!is.na(Cr.frame$Use),]#
Cr.frame <- Cr.frame[Cr.frame$Use,]#
Cr.frame[Cr.frame <= 0.0000] <- NA#
Cr.frame <- Cr.frame[!is.na(Cr.frame$Cr),]#
Cr.frame <- Cr.frame[Cr.frame$Cr>min(F4352ManureTracePred[["Values"]][["Cr.K.alpha"]], na.rm = TRUE) & Cr.frame$Cr<max(F4352ManureTracePred[["Values"]][["Cr.K.alpha"]], na.rm = TRUE), ]#
#
Cr.plot <- ggplot(Cr.frame, aes(Cr.K.alpha*10000, Cr*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Chromium ppm XRF",  labels = comma) +#
scale_y_continuous("Chromium ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()
Cr.plot
source('~/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ManureCompare.R', chdir = TRUE)
Na.frame <- ManureLight[["ValCurves"]]#
Na.frame$Use <- c(F4352ManureLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Na.frame <- Na.frame[!is.na(Na.frame$Use),]#
Na.frame <- Na.frame[Na.frame$Use,]#
Na.frame[Na.frame <= 0.0000] <- NA#
Na.frame <- Na.frame[!is.na(Na.frame$Na),]#
Na.frame <- Na.frame[Na.frame$Na>min(F4352ManureLightPred[["Values"]][["Na.K.alpha"]], na.rm = TRUE) & Na.frame$Na<max(F4352ManureLightPred[["Values"]][["Na.K.alpha"]], na.rm = TRUE), ]#
Na.plot <- ggplot(Na.frame, aes(Na.K.alpha*10000, Na*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Sodium ppm XRF",  labels = comma) +#
scale_y_continuous("Sodium ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()
Mg.frame <- ManureLight[["ValCurves"]]#
Mg.frame$Use <- c(F4352ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Mg.frame <- Mg.frame[!is.na(Mg.frame$Use),]#
Mg.frame <- Mg.frame[Mg.frame$Use,]#
Mg.frame[Mg.frame <= 0.0000] <- NA#
Mg.frame <- Mg.frame[!is.na(Mg.frame$Mg),]#
Mg.frame <- Mg.frame[Mg.frame$Mg>min(F4352ManureLightPred[["Values"]][["Mg.K.alpha"]], na.rm = TRUE) & Mg.frame$Mg<max(F4352ManureLightPred[["Values"]][["Mg.K.alpha"]], na.rm = TRUE), ]#
#
Mg.plot <- ggplot(Mg.frame, aes(Mg.K.alpha*10000, Mg*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Magnesium ppm XRF",  labels = comma) +#
scale_y_continuous("Magnesium ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()#
Al.frame <- ManureLight[["ValCurves"]]#
Al.frame$Use <- c(F4352ManureLight[["calList"]][["Al.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureLight[["calList"]][["Al.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureLight[["calList"]][["Al.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureLight[["calList"]][["Al.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Al.frame <- Al.frame[!is.na(Al.frame$Use),]#
Al.frame <- Al.frame[Al.frame$Use,]#
Al.frame[Al.frame <= 0.0000] <- NA#
Al.frame <- Al.frame[!is.na(Al.frame$Al),]#
Al.frame <- Al.frame[Al.frame$Al>min(F4352ManureTracePred[["Values"]][["Al.K.alpha"]], na.rm = TRUE) & Al.frame$Al<max(F4352ManureTracePred[["Values"]][["Al.K.alpha"]], na.rm = TRUE), ]#
#
Al.plot <- ggplot(Al.frame, aes(Al.K.alpha*10000, Al*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Aluminum ppm XRF",  labels = comma) +#
scale_y_continuous("Aluminum ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()#
P.frame <- ManureLight[["ValCurves"]]#
P.frame$Use <- c(F4352ManureLight[["calList"]][["P.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureLight[["calList"]][["P.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureLight[["calList"]][["P.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureLight[["calList"]][["P.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
P.frame <- P.frame[!is.na(P.frame$Use),]#
P.frame <- P.frame[P.frame$Use,]#
P.frame[P.frame <= 0.0000] <- NA#
P.frame <- P.frame[!is.na(P.frame$P),]#
P.frame <- P.frame[P.frame$P>min(F4352ManureTracePred[["Values"]][["P.K.alpha"]], na.rm = TRUE) & P.frame$P<max(F4352ManureTracePred[["Values"]][["P.K.alpha"]], na.rm = TRUE), ]#
#
P.plot <- ggplot(P.frame, aes(P.K.alpha*10000, P*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Phosphorous ppm XRF",  labels = comma) +#
scale_y_continuous("Phosphorous ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()#
S.frame <- ManureLight[["ValCurves"]]#
S.frame$Use <- c(F4352ManureLight[["calList"]][["S.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureLight[["calList"]][["S.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureLight[["calList"]][["S.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureLight[["calList"]][["S.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
S.frame <- S.frame[!is.na(S.frame$Use),]#
S.frame <- S.frame[S.frame$Use,]#
S.frame[S.frame <= 0.0000] <- NA#
S.frame <- S.frame[!is.na(S.frame$S),]#
S.frame <- S.frame[S.frame$S>min(F4352ManureTracePred[["Values"]][["S.K.alpha"]], na.rm = TRUE) & S.frame$S<max(F4352ManureTracePred[["Values"]][["S.K.alpha"]], na.rm = TRUE), ]#
#
S.plot <- ggplot(S.frame, aes(S.K.alpha*10000, S*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Sulfur ppm XRF",  labels = comma) +#
scale_y_continuous("Sulfur ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()#
K.frame <- ManureLight[["ValCurves"]]#
K.frame$Use <- c(F4352ManureLight[["calList"]][["K.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureLight[["calList"]][["K.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureLight[["calList"]][["K.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureLight[["calList"]][["K.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
K.frame <- K.frame[!is.na(K.frame$Use),]#
K.frame <- K.frame[K.frame$Use,]#
K.frame[K.frame <= 0.0000] <- NA#
K.frame <- K.frame[!is.na(K.frame$K),]#
K.frame <- K.frame[K.frame$K>min(F4352ManureTracePred[["Values"]][["K.K.alpha"]], na.rm = TRUE) & K.frame$K<max(F4352ManureTracePred[["Values"]][["K.K.alpha"]], na.rm = TRUE), ]#
#
K.plot <- ggplot(K.frame, aes(K.K.alpha, K, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Potassium % XRF",  labels = comma) +#
scale_y_continuous("Potassium % ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()#
Ca.frame <- ManureLight[["ValCurves"]]#
Ca.frame$Use <- c(F4352ManureLight[["calList"]][["Ca.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureLight[["calList"]][["Ca.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureLight[["calList"]][["Ca.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureLight[["calList"]][["Ca.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Ca.frame <- Ca.frame[!is.na(Ca.frame$Use),]#
Ca.frame <- Ca.frame[Ca.frame$Use,]#
Ca.frame[Ca.frame <= 0.0000] <- NA#
Ca.frame <- Ca.frame[!is.na(Ca.frame$Ca),]#
Ca.frame#
Ca.frame <- Ca.frame[Ca.frame$Ca>min(F4352ManureTracePred[["Values"]][["Ca.K.alpha"]], na.rm = TRUE) & Ca.frame$Ca<max(F4352ManureTracePred[["Values"]][["Ca.K.alpha"]], na.rm = TRUE), ]#
#
Ca.plot <- ggplot(Ca.frame, aes(Ca.K.alpha, Ca, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Calcium % XRF",  labels = comma) +#
scale_y_continuous("Calcium % ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()#
Ti.frame <- ManureTrace[["ValCurves"]]#
Ti.frame$Use <- c(F4352ManureTrace[["calList"]][["Ti.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureTrace[["calList"]][["Ti.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureTrace[["calList"]][["Ti.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureTrace[["calList"]][["Ti.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Ti.frame <- Ti.frame[!is.na(Ti.frame$Use),]#
Ti.frame <- Ti.frame[Ti.frame$Use,]#
Ti.frame[Ti.frame <= 0.0000] <- NA#
Ti.frame <- Ti.frame[!is.na(Ti.frame$Ti),]#
Ti.frame <- Ti.frame[Ti.frame$Ti>min(F4352ManureTracePred[["Values"]][["Ti.K.alpha"]], na.rm = TRUE) & Ti.frame$Ti<max(F4352ManureTracePred[["Values"]][["Ti.K.alpha"]], na.rm = TRUE), ]#
#
Ti.plot <- ggplot(Ti.frame, aes(Ti.K.alpha*10000, Ti*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Titanium ppm XRF",  labels = comma) +#
scale_y_continuous("Titanium ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()#
Cr.frame <- ManureTrace[["ValCurves"]]#
Cr.frame$Use <- c(F4352ManureTrace[["calList"]][["Cr.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureTrace[["calList"]][["Cr.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureTrace[["calList"]][["Cr.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureTrace[["calList"]][["Cr.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Cr.frame <- Cr.frame[!is.na(Cr.frame$Use),]#
Cr.frame <- Cr.frame[Cr.frame$Use,]#
Cr.frame[Cr.frame <= 0.0000] <- NA#
Cr.frame <- Cr.frame[!is.na(Cr.frame$Cr),]#
Cr.frame <- Cr.frame[Cr.frame$Cr>min(F4352ManureTracePred[["Values"]][["Cr.K.alpha"]], na.rm = TRUE) & Cr.frame$Cr<max(F4352ManureTracePred[["Values"]][["Cr.K.alpha"]], na.rm = TRUE), ]#
#
Cr.plot <- ggplot(Cr.frame, aes(Cr.K.alpha*10000, Cr*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Chromium ppm XRF",  labels = comma) +#
scale_y_continuous("Chromium ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()#
Mn.frame <- ManureTrace[["ValCurves"]]#
Mn.frame$Use <- c(F4352ManureTrace[["calList"]][["Mn.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureTrace[["calList"]][["Mn.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureTrace[["calList"]][["Mn.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureTrace[["calList"]][["Mn.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Mn.frame <- Mn.frame[!is.na(Mn.frame$Use),]#
Mn.frame <- Mn.frame[Mn.frame$Use,]#
Mn.frame[Mn.frame <= 0.0000] <- NA#
Mn.frame <- Mn.frame[!is.na(Mn.frame$Mn),]#
Mn.frame <- Mn.frame[Mn.frame$Mn>min(F4352ManureTracePred[["Values"]][["Mn.K.alpha"]], na.rm = TRUE) & Mn.frame$Mn<max(F4352ManureTracePred[["Values"]][["Mn.K.alpha"]], na.rm = TRUE), ]#
#
Mn.plot <- ggplot(Mn.frame, aes(Mn.K.alpha*10000, Mn*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Manganese ppm XRF",  labels = comma) +#
scale_y_continuous("Manganese ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()#
Fe.frame <- ManureTrace[["ValCurves"]]#
Fe.frame$Use <- c(F4352ManureTrace[["calList"]][["Fe.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureTrace[["calList"]][["Fe.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureTrace[["calList"]][["Fe.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureTrace[["calList"]][["Fe.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Fe.frame <- Fe.frame[!is.na(Fe.frame$Use),]#
Fe.frame <- Fe.frame[Fe.frame$Use,]#
Fe.frame[Fe.frame <= 0.0000] <- NA#
Fe.frame <- Fe.frame[!is.na(Fe.frame$Mn),]#
Fe.frame <- Fe.frame[Fe.frame$Fe>min(F4352ManureTracePred[["Values"]][["Fe.K.alpha"]], na.rm = TRUE) & Fe.frame$Fe<max(F4352ManureTracePred[["Values"]][["Fe.K.alpha"]], na.rm = TRUE), ]#
#
Fe.plot <- ggplot(Fe.frame, aes(Fe.K.alpha*10000, Fe*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Iron ppm XRF",  labels = comma) +#
scale_y_continuous("Iron ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()#
Co.frame <- ManureTrace[["ValCurves"]]#
Co.frame$Use <- c(F4352ManureTrace[["calList"]][["Co.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureTrace[["calList"]][["Co.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureTrace[["calList"]][["Co.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureTrace[["calList"]][["Co.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Co.frame <- Co.frame[!is.na(Co.frame$Use),]#
Co.frame <- Co.frame[Co.frame$Use,]#
Co.frame[Co.frame <= 0.0000] <- NA#
Co.frame <- Co.frame[!is.na(Co.frame$Co),]#
Co.frame <- Co.frame[Co.frame$Co>min(F4352ManureTracePred[["Values"]][["Co.K.alpha"]], na.rm = TRUE) & Co.frame$Co<max(F4352ManureTracePred[["Values"]][["Co.K.alpha"]], na.rm = TRUE), ]#
#
Co.plot <- ggplot(Co.frame, aes(Co.K.alpha*10000, Co*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Cobalt ppm XRF",  labels = comma) +#
scale_y_continuous("Cobalt ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()#
Ni.frame <- ManureTrace[["ValCurves"]]#
Ni.frame$Use <- c(F4352ManureTrace[["calList"]][["Ni.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureTrace[["calList"]][["Ni.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureTrace[["calList"]][["Ni.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureTrace[["calList"]][["Ni.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Ni.frame <- Ni.frame[!is.na(Ni.frame$Use),]#
Ni.frame <- Ni.frame[Ni.frame$Use,]#
Ni.frame[Ni.frame <= 0.0000] <- NA#
Ni.frame <- Ni.frame[!is.na(Ni.frame$Ni),]#
Ni.frame <- Ni.frame[Ni.frame$Ni>min(F4352ManureTracePred[["Values"]][["Ni.K.alpha"]], na.rm = TRUE) & Ni.frame$Ni<max(F4352ManureTracePred[["Values"]][["Ni.K.alpha"]], na.rm = TRUE), ]#
#
Ni.plot <- ggplot(Ni.frame, aes(Ni.K.alpha*10000, Ni*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Nickel ppm XRF",  labels = comma) +#
scale_y_continuous("Nickel ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()#
Cu.frame <- ManureTrace[["ValCurves"]]#
Cu.frame$Use <- c(F4352ManureTrace[["calList"]][["Cu.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureTrace[["calList"]][["Cu.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureTrace[["calList"]][["Cu.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureTrace[["calList"]][["Cu.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Cu.frame <- Cu.frame[!is.na(Cu.frame$Use),]#
Cu.frame <- Cu.frame[Cu.frame$Use,]#
Cu.frame[Cu.frame <= 0.0000] <- NA#
Cu.frame <- Cu.frame[!is.na(Cu.frame$Cu),]#
Cu.frame <- Cu.frame[Cu.frame$Cu>min(F4352ManureTracePred[["Values"]][["Cu.K.alpha"]], na.rm = TRUE) & Cu.frame$Cu<max(F4352ManureTracePred[["Values"]][["Cu.K.alpha"]], na.rm = TRUE), ]#
#
Cu.plot <- ggplot(Cu.frame, aes(Cu.K.alpha*10000, Cu*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Copper ppm XRF",  labels = comma) +#
scale_y_continuous("Copper ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()#
Zn.frame <- ManureTrace[["ValCurves"]]#
Zn.frame$Use <- c(F4352ManureTrace[["calList"]][["Zn.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureTrace[["calList"]][["Zn.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureTrace[["calList"]][["Zn.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureTrace[["calList"]][["Zn.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Zn.frame <- Zn.frame[!is.na(Zn.frame$Use),]#
Zn.frame <- Zn.frame[Zn.frame$Use,]#
Zn.frame[Zn.frame <= 0.0000] <- NA#
Zn.frame <- Zn.frame[!is.na(Zn.frame$Zn),]#
Zn.frame <- Zn.frame[Zn.frame$Zn>min(F4352ManureTracePred[["Values"]][["Zn.K.alpha"]], na.rm = TRUE) & Zn.frame$Zn<max(F4352ManureTracePred[["Values"]][["Zn.K.alpha"]], na.rm = TRUE), ]#
#
Zn.plot <- ggplot(Zn.frame, aes(Zn.K.alpha*10000, Zn*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Zinc ppm XRF",  labels = comma) +#
scale_y_continuous("Zinc ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()#
As.frame <- ManureTrace[["ValCurves"]]#
As.frame$Use <- c(F4352ManureTrace[["calList"]][["As.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureTrace[["calList"]][["As.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureTrace[["calList"]][["As.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureTrace[["calList"]][["As.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
As.frame <- As.frame[!is.na(As.frame$Use),]#
As.frame <- As.frame[As.frame$Use,]#
As.frame[As.frame <= 0.0000] <- NA#
As.frame <- As.frame[!is.na(As.frame$As),]#
As.frame <- As.frame[As.frame$As>min(F4352ManureTracePred[["Values"]][["As.K.alpha"]], na.rm = TRUE) & As.frame$As<max(F4352ManureTracePred[["Values"]][["As.K.alpha"]], na.rm = TRUE), ]#
#
As.plot <- ggplot(As.frame, aes(As.K.alpha*10000, As*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Arsenic ppm XRF",  labels = comma) +#
scale_y_continuous("Arsenic ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()#
Se.frame <- ManureTrace[["ValCurves"]]#
Se.frame$Use <- c(F4352ManureTrace[["calList"]][["Se.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureTrace[["calList"]][["Se.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureTrace[["calList"]][["Se.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureTrace[["calList"]][["Se.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Se.frame <- Se.frame[!is.na(Se.frame$Use),]#
Se.frame <- Se.frame[Se.frame$Use,]#
Se.frame[Se.frame <= 0.0000] <- NA#
Se.frame <- Se.frame[!is.na(Se.frame$Se),]#
Se.frame <- Se.frame[Se.frame$Se>min(F4352ManureTracePred[["Values"]][["Se.K.alpha"]], na.rm = TRUE) & Se.frame$Se<max(F4352ManureTracePred[["Values"]][["Se.K.alpha"]], na.rm = TRUE), ]#
#
Se.plot <- ggplot(Se.frame, aes(Se.K.alpha*10000, Se*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Selenium ppm XRF",  labels = comma) +#
scale_y_continuous("Selenium ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()#
Mo.frame <- ManureTrace[["ValCurves"]]#
Mo.frame$Use <- c(F4352ManureTrace[["calList"]][["Mo.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureTrace[["calList"]][["Mo.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureTrace[["calList"]][["Mo.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureTrace[["calList"]][["Mo.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Mo.frame <- Mo.frame[!is.na(Mo.frame$Use),]#
Mo.frame <- Mo.frame[Mo.frame$Use,]#
Mo.frame[Mo.frame <= 0.0000] <- NA#
Mo.frame <- Mo.frame[!is.na(Mo.frame$Mo),]#
Mo.frame <- Mo.frame[Mo.frame$Mo>min(F4352ManureTracePred[["Values"]][["Mo.K.alpha"]], na.rm = TRUE) & Mo.frame$Mo<max(F4352ManureTracePred[["Values"]][["Mo.K.alpha"]], na.rm = TRUE), ]#
#
Mo.plot <- ggplot(Mo.frame, aes(Mo.K.alpha*10000, Mo*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Molybdenum ppm XRF",  labels = comma) +#
scale_y_continuous("Molybdenum ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()#
Cd.frame <- ManureTrace[["ValCurves"]]#
Cd.frame <- Cd.frame[!is.na(Cd.frame$Cd),]#
Cd.frame$Use <- c(F4352ManureTrace[["calList"]][["Cd.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureTrace[["calList"]][["Cd.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureTrace[["calList"]][["Cd.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureTrace[["calList"]][["Cd.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Cd.frame[Cd.frame <= 0.0000] <- NA#
Cd.frame <- Cd.frame[!is.na(Cd.frame$Use),]#
Cd.frame <- Cd.frame[!is.na(Cd.frame$Cd),]#
Cd.frame <- Cd.frame[Cd.frame$Use,]#
Cd.frame <- Cd.frame[Cd.frame$Cd>min(F4352ManureTracePred[["Values"]][["Cd.K.alpha"]], na.rm = TRUE) & Cd.frame$Cd<max(F4352ManureTracePred[["Values"]][["Cd.K.alpha"]], na.rm = TRUE), ]#
#
Cd.plot <- ggplot(Cd.frame, aes(Cd.K.alpha*10000, Cd*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Cadmium ppm XRF",  labels = comma) +#
scale_y_continuous("Cadmium ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()#
Pb.frame <- ManureTrace[["ValCurves"]]#
Pb.frame$Use <- c(F4352ManureTrace[["calList"]][["Pb.L.beta"]][[1]][["StandardsUsed"]][61:121], F4473ManureTrace[["calList"]][["Pb.L.beta"]][[1]][["StandardsUsed"]][61:121], F4504ManureTrace[["calList"]][["Pb.L.beta"]][[1]][["StandardsUsed"]][61:121], F4166ManureTrace[["calList"]][["Pb.L.beta"]][[1]][["StandardsUsed"]][61:121])#
Pb.frame <- Pb.frame[!is.na(Pb.frame$Use),]#
Pb.frame <- Pb.frame[Pb.frame$Use,]#
Pb.frame[Pb.frame <= 0.0000] <- NA#
Pb.frame <- Pb.frame[!is.na(Pb.frame$Pb),]#
Pb.frame <- Pb.frame[Pb.frame$Pb>min(F4352ManureTracePred[["Values"]][["Pb.K.alpha"]], na.rm = TRUE) & Pb.frame$Pb<max(F4352ManureTracePred[["Values"]][["Pb.K.alpha"]], na.rm = TRUE), ]#
#
Pb.plot <- ggplot(Pb.frame, aes(Pb.L.beta*10000, Pb*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Lead ppm XRF",  labels = comma) +#
scale_y_continuous("Lead ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()
Cd.frame <- ManureTrace[["ValCurves"]]#
#Cd.frame <- Cd.frame[!is.na(Cd.frame$Cd),]#
Cd.frame$Use <- c(F4352ManureTrace[["calList"]][["Cd.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureTrace[["calList"]][["Cd.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureTrace[["calList"]][["Cd.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureTrace[["calList"]][["Cd.K.alpha"]][[1]][["StandardsUsed"]][61:121])#
Cd.frame[Cd.frame <= 0.0000] <- NA#
Cd.frame <- Cd.frame[!is.na(Cd.frame$Use),]#
Cd.frame <- Cd.frame[!is.na(Cd.frame$Cd),]#
Cd.frame <- Cd.frame[Cd.frame$Use,]#
Cd.frame <- Cd.frame[Cd.frame$Cd>min(F4352ManureTracePred[["Values"]][["Cd.K.alpha"]], na.rm = TRUE) & Cd.frame$Cd<max(F4352ManureTracePred[["Values"]][["Cd.K.alpha"]], na.rm = TRUE), ]
source('~/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ManureCompare.R', chdir = TRUE)
Pb.frame <- ManureTrace[["ValCurves"]]#
Pb.frame$Use <- c(F4352ManureTrace[["calList"]][["Pb.L.beta"]][[1]][["StandardsUsed"]][61:121], F4473ManureTrace[["calList"]][["Pb.L.beta"]][[1]][["StandardsUsed"]][61:121], F4504ManureTrace[["calList"]][["Pb.L.beta"]][[1]][["StandardsUsed"]][61:121], F4166ManureTrace[["calList"]][["Pb.L.beta"]][[1]][["StandardsUsed"]][61:121])#
Pb.frame <- Pb.frame[!is.na(Pb.frame$Use),]#
Pb.frame <- Pb.frame[Pb.frame$Use,]#
Pb.frame[Pb.frame <= 0.0000] <- NA#
Pb.frame <- Pb.frame[!is.na(Pb.frame$Pb),]#
Pb.frame <- Pb.frame[Pb.frame$Pb>min(F4352ManureTracePred[["Values"]][["Pb.L.beta"]], na.rm = TRUE) & Pb.frame$Pb<max(F4352ManureTracePred[["Values"]][["Pb.L.beta"]], na.rm = TRUE), ]#
#
Pb.plot <- ggplot(Pb.frame, aes(Pb.L.beta*10000, Pb*10000, colour=Instrument, shape=Instrument)) +#
geom_abline(intercept=0, slope=1, lty=2) +#
stat_smooth(method="lm", aes(fill=Instrument), alpha=0.1) +#
geom_point(alpha=0.7) +#
scale_x_continuous("Lead ppm XRF",  labels = comma) +#
scale_y_continuous("Lead ppm ICP-MS",  labels = comma) +#
coord_equal() +#
theme_light()
Pb.plot
Cr.plot
source('~/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ManureCompare.R', chdir = TRUE)
Al.plot
head(Al.frame)
Al.frame <- ManureLight[["ValCurves"]]#
Al.frame$Use <- c(F4352ManureLight[["calList"]][["Al.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4473ManureLight[["calList"]][["Al.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4504ManureLight[["calList"]][["Al.K.alpha"]][[1]][["StandardsUsed"]][61:121], F4166ManureLight[["calList"]][["Al.K.alpha"]][[1]][["StandardsUsed"]][61:121])
head(Al.frame)
Al.frame <- Al.frame[!is.na(Al.frame$Use),]
head(Al.frame)
Al.frame <- Al.frame[Al.frame$Use,]
head(Al.frame)
Al.frame[Al.frame <= 0.0000] <- NA
head(Al.frame)
Al.frame <- Al.frame[!is.na(Al.frame$Al),]
head(Al.frame)
source('~/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ManureCompare.R', chdir = TRUE)
round(3.14, 0)
shiny::runApp("~/GitHub/Cezanne")
