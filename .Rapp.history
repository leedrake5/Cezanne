length(channels[1])
noquote(channels)
noquote(channels)[1]
channels.pre <- xmllist[["ClassInstance"]][["Channels"]][[1]]
channels <- strsplit(channels.pre, ",", )
length(channels)
channels
channels <- strsplit(channels.pre, ",", )[[1]]
length(channels)
channels <- as.numeric(strsplit(channels.pre, ",", )[[1]])
channels
length(channels)
str(xmllist)
newdata <- as.data.frame(seq(1, 4096, 1))
head(newdata)
ls(xmllist[["RTHeader"]])
xmllist[["RTHeader"]]
ls(xmllist[[1]])
xmllist[[1]]
xmllist[[2]]
ls(xmllist[["ClassInstance"]])
xmllist[["ClassInstance"]][["TRTHeaderedClass"]][["ClassInstance"]][["LifeTime"]]
ls(xmllist[["ClassInstance"]][["TRTHeaderedClass"]])
ls(xmllist[["ClassInstance"]][["TRTHeaderedClass"]][["ClassInstance"]])
ls(xmllist[["ClassInstance"]][["TRTHeaderedClass"]][["ClassInstance"]][["TRTKnownHeader"]])
head(xmllist[["ClassInstance"]][["ClassInstance"]])
xmllist[["ClassInstance"]][["ClassInstance"]][["CalibAbs"]]
as.numeric(xmllist[["ClassInstance"]][["ClassInstance"]][["CalibAbs"]])
slope <- as.numeric(xmllist[["ClassInstance"]][["ClassInstance"]][["CalibLin"]])
slope
xmllist[["ClassInstance"]][["TRTHeaderedClass"]][["ClassInstance"]][["LifeTime"]]
xmllist[["TRTHeaderedClass"]][["ClassInstance"]][["LifeTime"]]
ls(xmllist[["TRTHeaderedClass"]])
ls(xmllist)
time <- xmllist[["RTHeaderedClass"]][["ClassInstance"]][["LifeTime"]]
time
ls(xmllist[["RTHeaderedClass"]])
ls(xmllist[["RTHeader"]])
xmllist[[2]]
time <- xmllist[[2]][["TRTHeaderedClass"]][["ClassInstance"]][["LifeTime"]]
time
xmllist[[2]][["TRTHeaderedClass"]]
xmllist[[2]][["TRTHeaderedClass"]][["ClassInstance"]]
xmllist[[2]][["TRTHeaderedClass"]][["ClassInstance"]][["RtGenerator"]]
xmllist[[2]][["TRTHeaderedClass"]][["ClassInstance"]][["RTGenerator"]]
xmllist[[2]][["TRTHeaderedClass"]][["ClassInstance"]][["ClassInstance"]]
xmllist[[2]][["TRTHeaderedClass"]][["ClassInstance"]]
xmllist[[2]][["TRTHeaderedClass"]][[1]]
xmllist[[2]][["TRTHeaderedClass"]][[2]]
xmllist[[2]][["TRTHeaderedClass"]][[3]]
time <- as.numeric(xmllist[[2]][["TRTHeaderedClass"]][[3]][["LifeTime"]])/1000
time
newdata[1]
energy <- newdata[,1]
energy
energy <- newdata[,1]*slope+intercept
intercept <- as.numeric(xmllist[["ClassInstance"]][["ClassInstance"]][["CalibAbs"]])
slope <- as.numeric(xmllist[["ClassInstance"]][["ClassInstance"]][["CalibLin"]])
energy <- newdata[,1]*slope+intercept
energy
readSPX <- function(xmlfile){#
    filename <- gsub(".spx", "", basename(xmlfile))#
    filename.vector <- rep(filename, 4096)#
    xmlfile <- xmlTreeParse("/Users/lee/Desktop/XG Labs/standards/SPX/932E_7point3_spectrum.spx")#
    xmllist <- xmlToList(xmlfile)#
    channels.pre <- xmllist[["ClassInstance"]][["Channels"]][[1]]#
    counts <- as.numeric(strsplit(channels.pre, ",", )[[1]])#
    newdata <- as.data.frame(seq(1, 4096, 1))#
    intercept <- as.numeric(xmllist[["ClassInstance"]][["ClassInstance"]][["CalibAbs"]])#
    slope <- as.numeric(xmllist[["ClassInstance"]][["ClassInstance"]][["CalibLin"]])#
    time <- as.numeric(xmllist[[2]][["TRTHeaderedClass"]][[3]][["LifeTime"]])/1000#
    cps <- counts/time#
    energy <- newdata[,1]*slope+intercept#
    spectra.frame <- data.frame(energy, cps, filename.vector)#
    colnames(spectra.frame) <- c("Energy", "CPS", "Spectrum")#
    return(spectra.frame)#
#
}
test.frame <- rbind(readSPX("/Users/lee/Desktop/XG Labs/CUM 7133-6_spectrum.spx"), readMCA("/Users/lee/Desktop/XG Labs/GettyA_4point07_spectrum.spx"), readMCA("/Users/lee/Desktop/XG Labs/HK8_21_spectrum.spx"))
test.frame <- rbind(readSPT("/Users/lee/Desktop/XG Labs/CUM 7133-6_spectrum.spt"), readSPT("/Users/lee/Desktop/XG Labs/GettyA_4point07_spectrum.spt"), readSPT("/Users/lee/Desktop/XG Labs/HK8_21_spectrum.spt"))
test.frame <- rbind(readMCA("/Users/lee/Desktop/XG Labs/CUM 7133-6_spectrum.mca"), readMCA("/Users/lee/Desktop/XG Labs/GettyA_4point07_spectrum.mca"), readMCA("/Users/lee/Desktop/XG Labs/HK8_21_spectrum.mca"))
test.frame <- rbind(readSPX("/Users/lee/Desktop/XG Labs/CUM 7133-6_spectrum.spx"), readMCA("/Users/lee/Desktop/XG Labs/GettyA_4point07_spectrum.spx"), readMCA("/Users/lee/Desktop/XG Labs/HK8_21_spectrum.spx"))
test.frame <- rbind(readSPX("/Users/lee/Desktop/XG Labs/CUM 7133-6_spectrum.spx"), readSPX("/Users/lee/Desktop/XG Labs/GettyA_4point07_spectrum.spx"), readSPX("/Users/lee/Desktop/XG Labs/HK8_21_spectrum.spx"))
head(test.frame)
ggplot(test.frame) +#
geom_line(aes(Energy, CPS, colour=Spectrum)) +#
scale_x_continuous(limits=c(5, 20)) +#
geom_vline(xintercept=8.04,  colour="grey80", linetype=4) +#
geom_vline(xintercept=10.5,  colour="grey80", linetype=4) +#
theme_light()
readSPX <- function(xmlfile){#
    filename <- gsub(".spx", "", basename(xmlfile))#
    filename.vector <- rep(filename, 4096)#
    xmlfile <- xmlTreeParse(xmlfile)#
    xmllist <- xmlToList(xmlfile)#
    channels.pre <- xmllist[["ClassInstance"]][["Channels"]][[1]]#
    counts <- as.numeric(strsplit(channels.pre, ",", )[[1]])#
    newdata <- as.data.frame(seq(1, 4096, 1))#
    intercept <- as.numeric(xmllist[["ClassInstance"]][["ClassInstance"]][["CalibAbs"]])#
    slope <- as.numeric(xmllist[["ClassInstance"]][["ClassInstance"]][["CalibLin"]])#
    time <- as.numeric(xmllist[[2]][["TRTHeaderedClass"]][[3]][["LifeTime"]])/1000#
    cps <- counts/time#
    energy <- newdata[,1]*slope+intercept#
    spectra.frame <- data.frame(energy, cps, filename.vector)#
    colnames(spectra.frame) <- c("Energy", "CPS", "Spectrum")#
    return(spectra.frame)#
#
}
test.frame <- rbind(readSPX("/Users/lee/Desktop/XG Labs/CUM 7133-6_spectrum.spx"), readSPX("/Users/lee/Desktop/XG Labs/GettyA_4point07_spectrum.spx"), readSPX("/Users/lee/Desktop/XG Labs/HK8_21_spectrum.spx"))
ggplot(test.frame) +#
geom_line(aes(Energy, CPS, colour=Spectrum)) +#
scale_x_continuous(limits=c(5, 20)) +#
geom_vline(xintercept=8.04,  colour="grey80", linetype=4) +#
geom_vline(xintercept=10.5,  colour="grey80", linetype=4) +#
theme_light()
shiny::runApp("~/GitHub/cloudCal")
rtxfile <- "~/Desktop/XG Labs/standards/RTX/testcal.rtx"
xmlfile <- xmlTreeParse(rtxfile)
xmllist <- xmlToList(xmlfile)
str(xmllist)
ls(xmllist)
ls(xmllist[[1]])
ls(xmllist[[2]])
ls(xmllist[["ClassInstance"]])
ls(xmllist[["RTHeader"]])
ls(xmllist[["ClassInstance"]])
head(xmllist[["ClassInstance"]])
length(xmllist[["ClassInstance"]])
length(xmllist[["RTHeader"]])
xmllist[["RTHeader"]]
length(xmllist[["ClassInstance"]][[1]])
xmllist[["ClassInstance"]][[1]]
length(xmllist[["ClassInstance"]][[2]])
length(xmllist[["ClassInstance"]][[3]])
length(xmllist[["ClassInstance"]][[4]])
length(xmllist[["ClassInstance"]][[5]])
length(xmllist[["ClassInstance"]][[6]])
length(xmllist[["ClassInstance"]][[7]])
length(xmllist[["ClassInstance"]][[8]])
length(xmllist[["ClassInstance"]][[9]])
length(xmllist[["ClassInstance"]][[10]])
length(xmllist[["ClassInstance"]][[11]])
xmllist[["ClassInstance"]][[6]]
length(xmllist)
xmllist[["ClassInstance"]][[3]]
xmllist[["ClassInstance"]][[2]]
xmllist[["ClassInstance"]][[1]]
xmllist
length(xmlfile)
length(xmlfile[[1]])
length(xmlfile[[2]])
xmllist
ls(xmllist)
ls(xmillist[[2]])
ls(xmillist[[1]])
xmlllist[[1]]
xmllist[[1]]
xmllist[[2]]
xmllist[[2]][[25]]
xmllist[[2]][[20]]
length(xmllist[[2]])
length(xmllist[[2]][[1]])
length(xmllist[[2]][[2]])
n <- length(xmllist[[2]])-2
n
n <- (length(xmllist[[2]])-2)/5
n
file.index <- seq(n, n^2, n)
file.index
xmllist[[2]][[20]][["Name"]]
file.names <- for(i in n){#
        xmllist[[2]][[n]][["Name"]]#
    }
file.names
file.names <- for(i in n){#
        xmllist[[2]][[i]][["Name"]]#
    }
file.names
file.names <- for(i in n){#
        test <- xmllist[[2]][[i]][["Name"]]#
        return(test)#
    }
file.names
file.names <- for(i in n){#
        test[i] <- xmllist[[2]][[i]][["Name"]]#
        return(test)#
    }
file.names
file.names <- for(i in file.index){#
        test[i] <- xmllist[[2]][[i]][["Name"]]#
        return(test)#
    }
file.names
file.list <- lapply(file.index, function(x) xmllist[[2]][[x]][["Name"]])
file.list
file.list <- unlist(lapply(file.index, function(x) xmllist[[2]][[x]][["Name"]]))
file.list
shiny::runApp("~/GitHub/cloudCal")
rsconnect::deployApp("~/GitHub/cloudCal", appName="cloudCal")
update.packages()
library(ggplot2)#
library(XML)#
#
readSPT <- function(spt.file){#
	filename <- gsub(".spt", "", basename(spt.file))#
	filename.vector <- rep(filename, 4096)#
#
	meta <- paste0(readLines(spt.file, n=16),collapse=" ")#
	meta.split <- strsplit(meta, " ")#
	chan.1 <- as.numeric(meta.split[[1]][32])#
	energy.1 <- as.numeric(sub(",", ".", meta.split[[1]][33], fixed = TRUE))#
	chan.2 <- as.numeric(meta.split[[1]][34])#
	energy.2 <- as.numeric(sub(",", ".", meta.split[[1]][35], fixed = TRUE))#
	channels <- c(0, chan.1, chan.2)#
	energies <- c(0, energy.1, energy.2)#
	energy.cal <- lm(energies~ channels)#
	time <- as.numeric(meta.split[[1]][17])/1000#
	raw <- read.table(spt.file, skip=16)#
	cps <- raw[,1]/time#
	newdata <- as.data.frame(seq(1, 4096, 1))#
	colnames(newdata) <- "channels"#
	energy <- as.vector(predict.lm(energy.cal, newdata=newdata))#
	energy2 <- newdata[,1]*summary(energy.cal)$coef[2]#
	spectra.frame <- data.frame(filename.vector, energy, energy2, cps)#
	colnames(spectra.frame) <- c("Spectra", "Energy", "EnergySimp", "CPS")#
	return(spectra.frame)#
}#
readMCA <- function(mca.file){#
    filename <- gsub(".mca", "", basename(mca.file))#
    filename.vector <- rep(filename, 4096)#
    filepath <- mca.file#
    full <- read.csv(filepath, row.names=NULL)#
    chan.1.a.pre <- as.numeric(unlist(strsplit(gsub("# Calibration1: ", "", full[13,1]), " ")))#
    chan.1.b.pre <- as.numeric(full[13,2])#
    chan.2.a.pre <- as.numeric(unlist(strsplit(gsub("# Calibration2: ", "", full[14,1]), " ")))#
    chan.2.b.pre <- as.numeric(full[14,2])#
    chan.1 <- chan.1.a.pre[1]#
    energy.1 <- chan.1.a.pre[2] + chan.1.b.pre/(10^nchar(chan.1.b.pre))#
    chan.2 <- chan.2.a.pre[1]#
    energy.2 <- chan.2.a.pre[2] + chan.2.b.pre/(10^nchar(chan.2.b.pre))#
    channels <- c(chan.1, chan.2)#
    energies <- c(energy.1, energy.2)#
    energy.cal <- lm(energies~channels)#
    time.1 <- as.numeric(gsub("# Live time: ", "", full[10,1], " "))#
    time.2 <- as.numeric(full[10,2])#
    time <- time.1 + time.2/(10^nchar(time.2))#
    cps <- as.numeric(full[17:4112, 1])/time#
    newdata <- as.data.frame(seq(1, 4096, 1))#
    colnames(newdata) <- "channels"#
    energy <- as.vector(predict.lm(energy.cal, newdata=newdata))#
    energy2 <- newdata[,1]*summary(energy.cal)$coef[2]#
    spectra.frame <- data.frame(energy, cps, filename.vector)#
    colnames(spectra.frame) <- c("Energy", "CPS", "Spectrum")#
    return(spectra.frame)#
}#
#
readSPX <- function(xmlfile){#
    filename <- gsub(".spx", "", basename(xmlfile))#
    filename.vector <- rep(filename, 4096)#
    xmlfile <- xmlTreeParse(xmlfile)#
    xmllist <- xmlToList(xmlfile)#
    channels.pre <- xmllist[["ClassInstance"]][["Channels"]][[1]]#
    counts <- as.numeric(strsplit(channels.pre, ",", )[[1]])#
    newdata <- as.data.frame(seq(1, 4096, 1))#
    intercept <- as.numeric(xmllist[["ClassInstance"]][["ClassInstance"]][["CalibAbs"]])#
    slope <- as.numeric(xmllist[["ClassInstance"]][["ClassInstance"]][["CalibLin"]])#
    time <- as.numeric(xmllist[[2]][["TRTHeaderedClass"]][[3]][["LifeTime"]])/1000#
    cps <- counts/time#
    energy <- newdata[,1]*slope+intercept#
    spectra.frame <- data.frame(energy, cps, filename.vector)#
    colnames(spectra.frame) <- c("Energy", "CPS", "Spectrum")#
    return(spectra.frame)#
#
}#
read_csv_x <- function(filename) {#
    x <- as.numeric(substr(strsplit(filename,"\\X ")[[1]][2], 1, 6))#
    x#
}#
#
read_csv_y <- function(filename) {#
    y <- as.numeric(substr(strsplit(filename,"\\Y ")[[1]][2], 1, 6))#
    y#
}
update.packages()
myfiles.frame <- read.csv(file="~/Desktop/IStillDontLikeTrump.csv")
head(myfiles.frame)
myfiles.frame$ElementLine <- paste0(myfiles.frame$Element, myfiles.frame$Line, sep=".")
head(myfiles.frame)
myfiles.frame$ElementLine <- paste0(myfiles.frame$Element, ".", myfiles.frame$Line)
myfiles.frame
myfiles.frame <- read.csv(file="~/Desktop/IStillDontLikeTrump.csv")
myfiles.frame$ElementLine <- paste0(myfiles.frame$Element, ".", myfiles.frame$Line)
head(myfiles.frame)
data <- reshape2::dcast(myfiles.frame, x+y~ElementLine)
head(data)
data <- reshape2::dcast(myfiles.frame, x+y~ElementLine, aggregate=mean)
head(data)
data <- reshape2::dcast(myfiles.frame, x+y~ElementLine, value.var=Net)
data <- reshape2::dcast(myfiles.frame, x+y~ElementLine, value.var="Net")
head(data)
?dcast
data <- reshape2::dcast(myfiles.frame, x+y~ElementLine, value.var="Net", fun.aggregate=mean)
head(data)
length(data$x)
length(myfiles.frame$x)
metadata.dat <- data
options <- strsplit(colnames(metadata.dat[,3:length(metadata.dat)]), sep=".")
options <- strsplit(colnames(metadata.dat[,3:length(metadata.dat)]), split=".")
options[1]
options[2]
length(options)
colnames(metadata.dat[,3:length(metadata.dat)])
options <- strsplit(colnames(metadata.dat[,3:length(metadata.dat)]), split="[.]")
options
options <- as.data.frame(strsplit(colnames(metadata.dat[,3:length(metadata.dat)]), split="[.]"))
options
options <- t(as.data.frame(strsplit(colnames(metadata.dat[,3:length(metadata.dat)]), split="[.]")))
options
options <- unique(t(as.data.frame(strsplit(colnames(metadata.dat[,3:length(metadata.dat)]), split="[.]")))[,1])
options
line.names <- unique(t(as.data.frame(strsplit(colnames(metadata.dat[,3:length(metadata.dat)]), split="[.]")))[,2])
line.names
fishSubset3 <- data[,c("x", "y", paste0("K", ".", "12"))]
paste0("K", ".", "12")
fishSubset3 <- data[,c("x", "y", paste0("K", ".", "K12"))]
head(fishSubset3)
colnames(fishSubset3)[3] <- "Net"
head(fishSubset3)
shiny::runApp("~/GitHub/Cezanne")
?loadWorkbook
??loadWorkbook
library(openxlsx)
proto.fish <- loadWorkbook(file="~/Desktop/Slide/Obsidian Test.xlsx")
fish.sheets <- getSheets(proto.fish)
ls(proto.fish)
ls(proto.fish[["worksheets"]])
proto.fish
fish.sheets <- getSheetNames(proto.fish)
proto.fish <- readWorkbook(file=inFile$datapath)
proto.fish <- readWorkbook(file="~/Desktop/Slide/Obsidian Test.xlsx")
new.fish <- readWorkbook(proto.fish)
ls(new.fish)
new.fish
?readWorkbook
new.fish <- readWorkbook(proto.fish, sheet=2)
head(new.fish)
just.fish <- readWorkbook(proto.fish, sheet=2)
new.fish <- just.fish[,-1]
head(new.fish)
new.fish$x <- read_csv_x(just.fish[,1])
head(new.fish)
filename <- just.fish$X1[1]
filename
proto.fish <- loadWorkbook(file="~/Desktop/Cezanne Stuff/BF1179/BF1179 decon.xlsx")
just.fish <- readWorkbook(proto.fish, sheet=2)
new.fish <- just.fish[,-1]
new.fish$x <- read_csv_x(just.fish[,1])
head(new.fish)
new.fish$y <- read_csv_y(just.fish[,1])
head(new.fish)
tail(new.fish)
just.fish[,1][1]
just.fish[,1000][1]
just.fish[,100][1]
just.fish[,10][1]
just.fish[,1][1000]
test <- unique(new.fish$y)
test
new.fish$x <- do.call(read_csv_x, just.fish[,1])
new.fish$x <- do.call(read_csv_x, list(just.fish[,1]))
head(new.fish$x)
tail(new.fish$x)
unique(new.fish$x)
just.fish[,1]
new.fish$x <- as.numeric(substr(strsplit(just.fish[,1],"\\X ")[[1]][2], 1, 6))
length(unique(new.fish$x))
new.fish$x <- sapply(just.fish[,1], read_csv_x)
length(unique(new.fish$x))
head(new.fish$x)
new.fish$y <- sapply(just.fish[,1], read_csv_y)
head(new.fish)
tail(new.fish)
final.fish <- new.fish[,c("x", "y", names(just.fish[,-1]))]
head(final.fish)
shiny::runApp("~/GitHub/Cezanne")
test.frame <- data.frame(final.fish$x, final.fish$y, just.fish[,1])
head(test.frame)
tail(test.frame)
shiny::runApp("~/GitHub/Cezanne")
